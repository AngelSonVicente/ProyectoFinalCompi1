package com.example.proyectofinalcompi1.AnalizadorSintactico;

import java.util.ArrayList;
import java.util.List;
import com.example.proyectofinalcompi1.AnalizadorLexico.*;
import com.example.proyectofinalcompi1.Model.*;
import com.example.proyectofinalcompi1.Model.TablaSImbolos;

import java_cup.runtime.*;


parser code {:
    // Connect this parser to a scanner!
  public AnalizadorSintactico(analizadorLexico lex) {
	    super(lex);
	  }





String Errores;

public void syntax_error(Symbol cur_token) {
    StringBuilder error = new StringBuilder();
    error.append("ERROR SINTACTICO EN : ").append(symbl_name_from_id(cur_token.sym)).append("\n");
    error.append("Linea ").append(cur_token.left).append("\n");
    error.append("Columna ").append(cur_token.right).append("\n");
    if (cur_token.value != null) {
            error.append("Lexema: ").append(cur_token.value).append("\n");
        }



Errores=error.toString();
    System.out.println(error.toString());
}


private List<TablaSImbolos> tablaSimbolos= new ArrayList<>();
private List<DatosGraficaBarras> datosGraficaBarras = new ArrayList<>();
private List<DatosGraficaPuntos> coordenadas = new ArrayList<>();
private List<Serie> series = new ArrayList<>();
private List<PuntosSeries> puntosSeries= new ArrayList<>();
private List<Accion>  accionList = new ArrayList<>();




public List<TablaSImbolos> getTablaSimbolos(){
return tablaSimbolos;
}

public List<Accion> getAcciones(){
return accionList;
}

private boolean existeVariable(String variable){
  for(TablaSImbolos tabla: tablaSimbolos){
    if(tabla.getIdentificaor().equals(variable)){
    //setear el valor tambien

      return true;
    }
  }
  return false;
}











/*
public void unrecovered_syntax_error(Symbol cur_token) {
            System.out.println("Error irrecuperable sobrecargado");
        }*/
:}

/* Terminals (tokens returned by the scanner). */
terminal        TITLE, DESCRIPTION, KEYWORDS, HEADER, FOOTER, BACKGROUND_COLOR, FONT_FAMILY,
                FONT_SIZE, DATA, CATEGORY, VALUE, COLOR, CHART, X_AXIS_LABEL, Y_AXIS_LABEL,
                LEGEND_POSITION, X, Y, SIZE, NAME, POINTS, LINE_STYLE, SOLID, DASHED, LABEL,
                ICON, LINK, IF, ELSE, FOR, WHILE, DO, ASTERISCO, COMA, PUNTO_COMA, DOS_PUNTOS,
                PARENTESIS_A, PARENTESIS_C, LLAVE_A, LLAVE_C, CORCHETE_A, CORCHETE_C, BARRA,
                MENOR_IGUAL, MAYOR_IGUAL, DIFERENTE, IGUAL, IGUAL_IGUAL, MENOR_QUE, MAYOR_QUE,
                MAS, MENOS, IDENTIFICADOR, HEXADECIMAL, COMILLA, CADENA, TRUE, FALSE, CONSTANTE

                ;


/* Non-terminals */
//no terminales
non terminal   inicio, campos, lista_campos, grafica, grafica_barras, grafica_barra_simple, mas_category_simple, grafica_barras_extendida,
               mas_category_extendida, grafia_pastel, grafica_pastel_simple, grafica_pastel_extendido, mas_label, mas_label_extendido,
               grafica_puntos, grafica_puntos_simple, grafica_puntos_expandida, mas_coordenadas_simples, mas_coordenadas_expandidas,
               grafica_lineas_simple, grafica_lineas_expandida, series_simples, series_expandidas, grafica_lineas, mas_coordenadas_label,
               tarjeta_informacion_simple, tarjeta_informacion_extendida, tarjeta_informacion, asigancion, valor, operacion, condicion_if,
               condicion, booolean, comparador, bucle_for, condicional_for, constate_identificador, incremento_decremento, bucle_while,
               bucle_do_while, codigo, asignaciones, graficas, contenido, operaciones, estructura_control, estructuras_control,
               operador_artimetico, asignacion_compuesta, asignacion_operacion, asignacion_operacion_id, lista_instrucciones, instruccion,
               lista_instrucciones2







   ;



/* GRAMATICA */





start with inicio;

inicio ::= LLAVE_A
           TITLE DOS_PUNTOS CADENA COMA
           DESCRIPTION DOS_PUNTOS CADENA COMA
           KEYWORDS DOS_PUNTOS CORCHETE_A campos  CORCHETE_C COMA
           HEADER DOS_PUNTOS LLAVE_A  TITLE DOS_PUNTOS CADENA  LLAVE_C COMA
           FOOTER DOS_PUNTOS LLAVE_A CADENA DOS_PUNTOS CADENA LLAVE_C COMA
           BACKGROUND_COLOR DOS_PUNTOS HEXADECIMAL COMA
           FONT_FAMILY DOS_PUNTOS CADENA COMA
           FONT_SIZE DOS_PUNTOS CADENA



            lista_instrucciones:ins




LLAVE_C
{:
    accionList= (List<Accion>) ins;
:}



;

campos ::= CADENA lista_campos ;

lista_campos ::= COMA CADENA lista_campos
                | /*vacio*/ ;








//intrccion una sola instruccion
//lista_instruccion instruccion muchas instrucciones

lista_instrucciones ::= instruccion:in                                          {: List<Accion> acciones = new ArrayList<>();
                                                                                    if(in instanceof  GraficaBarras){
                                                                                    acciones.add(new Accion((GraficaBarras) in,null,null,null,null,null,null,null));
                                                                                    }
                                                                                    if(in instanceof GraficaLineas){
                                                                                    acciones.add(new Accion(null,(GraficaLineas) in,null,null,null,null,null,null));
                                                                                    }
                                                                                    if(in instanceof GraficaPastel){
                                                                                    acciones.add(new Accion(null,null,(GraficaPastel) in,null,null,null,null,null));
                                                                                    }if(in instanceof GraficaPuntos){
                                                                                    acciones.add(new Accion(null,null,null,(GraficaPuntos) in,null,null,null,null));
                                                                                    }if(in instanceof TarjetaInformacion){
                                                                                    acciones.add(new Accion(null,null,null,null,(TarjetaInformacion) in,null,null,null));
                                                                                    }
                                                                                    if(in instanceof IfCondicional){
                                                                                    acciones.add(new Accion(null,null,null,null,null,(IfCondicional) in,null,null));
                                                                                    }if(in instanceof WhileCiclo){
                                                                                    acciones.add(new Accion(null,null,null,null,null,null,(WhileCiclo) in,null));
                                                                                    }if(in instanceof ForCiclo){
                                                                                    acciones.add(new Accion(null,null,null,null,null,null,null,(ForCiclo) in));
                                                                                    }



                                                                                    RESULT=acciones;
                                                                                    :}

                        | lista_instrucciones:listaInstruccion instruccion:in       {: List<Accion> acciones = (List<Accion>  )listaInstruccion;
                                                                                        if(in instanceof  GraficaBarras){
                                                                                        acciones.add(new Accion((GraficaBarras) in,null,null,null,null,null,null,null));
                                                                                        }
                                                                                        if(in instanceof GraficaLineas){
                                                                                        acciones.add(new Accion(null,(GraficaLineas) in,null,null,null,null,null,null));
                                                                                        }
                                                                                        if(in instanceof GraficaPastel){
                                                                                        acciones.add(new Accion(null,null,(GraficaPastel) in,null,null,null,null,null));
                                                                                        }if(in instanceof GraficaPuntos){
                                                                                        acciones.add(new Accion(null,null,null,(GraficaPuntos) in,null,null,null,null));
                                                                                        }if(in instanceof TarjetaInformacion){
                                                                                        acciones.add(new Accion(null,null,null,null,(TarjetaInformacion) in,null,null,null));
                                                                                        }
                                                                                        if(in instanceof IfCondicional){
                                                                                        acciones.add(new Accion(null,null,null,null,null,(IfCondicional) in,null,null));
                                                                                        }
                                                                                        if(in instanceof WhileCiclo){
                                                                                        acciones.add(new Accion(null,null,null,null,null,null,(WhileCiclo) in,null));
                                                                                        }if(in instanceof ForCiclo){
                                                                                        acciones.add(new Accion(null,null,null,null,null,null,null,(ForCiclo) in));
                                                                                        }

                                                                                        RESULT=acciones;
                                                                                        :}


                        ;







instruccion ::= asignacion_operacion_id
                | condicion_if:condicion                                             {: RESULT=condicion; :}
                | bucle_while:bucle                                                  {:RESULT=bucle; System.out.println("\n\n\nWhile"+bucle.toString());:}
                | bucle_do_while:bucle                                               {:RESULT=bucle; System.out.println("\n\n\nWhile"+bucle.toString());:}
                | bucle_for:bucle                                                    {:RESULT=bucle;:}
                | LLAVE_A DATA DOS_PUNTOS CORCHETE_A LLAVE_A grafica_barras:grafica {: RESULT=grafica; :}
                | LLAVE_A DATA DOS_PUNTOS CORCHETE_A LLAVE_A grafia_pastel:grafica  {: RESULT=grafica; :}
                | LLAVE_A DATA DOS_PUNTOS CORCHETE_A LLAVE_A grafica_puntos:grafica {: RESULT=grafica; :}
                | LLAVE_A DATA DOS_PUNTOS CORCHETE_A LLAVE_A grafica_lineas:grafica {: RESULT=grafica; :}
                | LLAVE_A DATA DOS_PUNTOS LLAVE_A tarjeta_informacion:grafica       {: RESULT=grafica; :}

;














grafica_barras::= grafica_barra_simple:grafica         {: System.out.println("GRAFICA DE BARRAS SIMPLE"+ grafica.toString());       RESULT=grafica; :}
                 |  grafica_barras_extendida:grafica   {: System.out.println("GRAFICA DE BARRAS EXTENDIDA"+grafica.toString());  RESULT=grafica; :}



                ;

grafica_barra_simple ::= CATEGORY DOS_PUNTOS CADENA:cat COMA VALUE DOS_PUNTOS CONSTANTE:val LLAVE_C {:datosGraficaBarras.add(new DatosGraficaBarras(cat.toString(),  val.toString(), null )); :} mas_category_simple CORCHETE_C LLAVE_C {: RESULT = new GraficaBarras(true,new ArrayList<>(datosGraficaBarras),null,null,null,null,null,null); datosGraficaBarras.clear(); :}


                        ;

mas_category_simple ::= COMA LLAVE_A CATEGORY  DOS_PUNTOS CADENA:cat COMA VALUE DOS_PUNTOS CONSTANTE:val LLAVE_C {:datosGraficaBarras.add(new DatosGraficaBarras(cat.toString(), val.toString(), null )); :} mas_category_simple
                        | /*vacio*/
                        ;


grafica_barras_extendida ::= CATEGORY DOS_PUNTOS CADENA:cad COMA VALUE DOS_PUNTOS CONSTANTE:val COMA COLOR DOS_PUNTOS HEXADECIMAL:color LLAVE_C {: datosGraficaBarras.add(new DatosGraficaBarras(cad.toString(),val.toString(),color.toString()));  :} mas_category_extendida
                                CORCHETE_C COMA
                                CHART   DOS_PUNTOS LLAVE_A
                                  TITLE DOS_PUNTOS CADENA:title COMA
                                  X_AXIS_LABEL DOS_PUNTOS CADENA:xlabel COMA
                                  Y_AXIS_LABEL DOS_PUNTOS CADENA:ylabel LLAVE_C LLAVE_C
                        {: RESULT=new GraficaBarras(false, new ArrayList<>(datosGraficaBarras), title.toString(), xlabel.toString(), ylabel.toString(),null,null,null); datosGraficaBarras.clear(); :}

;

mas_category_extendida ::=  COMA LLAVE_A CATEGORY DOS_PUNTOS CADENA:cad COMA VALUE DOS_PUNTOS CONSTANTE:val COMA COLOR DOS_PUNTOS HEXADECIMAL:color LLAVE_C {:  datosGraficaBarras.add(new DatosGraficaBarras(cad.toString(),val.toString(),color.toString()));  :} mas_category_extendida
                            | /*vacio*/
;


grafia_pastel ::=  grafica_pastel_simple:grafica    {:System.out.println("Grafica pastel simple"+ grafica.toString());  RESULT=grafica; :}
                 | grafica_pastel_extendido:grafica {:System.out.println("Grafica pastel extendida"+grafica.toString());    RESULT=grafica; :}

                    ;


grafica_pastel_simple ::=  LABEL DOS_PUNTOS CADENA:cad COMA VALUE DOS_PUNTOS CONSTANTE:val LLAVE_C {: datosGraficaBarras.add(new DatosGraficaBarras(cad.toString(),  val.toString(), null )); :}mas_label CORCHETE_C LLAVE_C {: RESULT=new GraficaPastel(true, new ArrayList<>(datosGraficaBarras),null,null,null,null,null); datosGraficaBarras.clear(); :}

;


mas_label ::= COMA LLAVE_A LABEL DOS_PUNTOS CADENA:cad COMA VALUE DOS_PUNTOS CONSTANTE:val LLAVE_C {: datosGraficaBarras.add(new DatosGraficaBarras(cad.toString(),val.toString(),null)); :} mas_label
            | /*vacio */
;

grafica_pastel_extendido ::= LABEL DOS_PUNTOS CADENA:cad COMA VALUE DOS_PUNTOS CONSTANTE:val COMA COLOR DOS_PUNTOS HEXADECIMAL:color LLAVE_C {: datosGraficaBarras.add(new DatosGraficaBarras(cad.toString(),val.toString(),color.toString())); :}mas_label_extendido CORCHETE_C COMA
                              CHART DOS_PUNTOS LLAVE_A
                                TITLE DOS_PUNTOS CADENA:title COMA
                                LEGEND_POSITION DOS_PUNTOS CADENA:legendPosition LLAVE_C LLAVE_C
                                {: RESULT=new GraficaPastel(false, new ArrayList<>(datosGraficaBarras), title.toString(), legendPosition.toString(), null,null,null); datosGraficaBarras.clear();  :}


;
mas_label_extendido ::= COMA LLAVE_A LABEL DOS_PUNTOS CADENA:cad COMA VALUE DOS_PUNTOS CONSTANTE:val COMA COLOR DOS_PUNTOS HEXADECIMAL:color LLAVE_C {:datosGraficaBarras.add(new DatosGraficaBarras(cad.toString(),val.toString(),color.toString()));:}mas_label_extendido
                        | /*vacio*/
;















grafica_puntos ::= grafica_puntos_simple:grafica       {:System.out.println("Grafica de puntos: "+grafica.toString());  RESULT=grafica; :}
                  | grafica_puntos_expandida:grafica    {: System.out.println("GRAFICA DE PUNTOS EXPANDIDO" + grafica.toString());  RESULT=grafica;:}
                  ;


grafica_puntos_simple ::= X DOS_PUNTOS CONSTANTE:x COMA Y DOS_PUNTOS CONSTANTE:y  LLAVE_C {: coordenadas.add(new DatosGraficaPuntos(Integer.parseInt(x.toString()),Integer.parseInt(y.toString()),null,null)); :} mas_coordenadas_simples CORCHETE_C LLAVE_C {: RESULT = new GraficaPuntos(true, new ArrayList<>(coordenadas),null,null,null ,null,null,null );  coordenadas.clear(); :}

;

mas_coordenadas_simples ::= COMA  LLAVE_A X DOS_PUNTOS CONSTANTE:x COMA Y DOS_PUNTOS CONSTANTE:y LLAVE_C {:coordenadas.add(new DatosGraficaPuntos(Integer.parseInt(x.toString()),Integer.parseInt(y.toString()),null,null)); :} mas_coordenadas_simples
                        | /*vacio*/
;


grafica_puntos_expandida ::= X DOS_PUNTOS CONSTANTE:x COMA Y DOS_PUNTOS CONSTANTE:y COMA SIZE DOS_PUNTOS CONSTANTE:size COMA COLOR DOS_PUNTOS HEXADECIMAL:color LLAVE_C {:coordenadas.add(new DatosGraficaPuntos(Integer.parseInt(x.toString()),Integer.parseInt(y.toString()),Integer.parseInt(size.toString()), color.toString())); :} mas_coordenadas_expandidas CORCHETE_C COMA
                            CHART DOS_PUNTOS LLAVE_A
                            TITLE DOS_PUNTOS CADENA:title COMA
                            X_AXIS_LABEL DOS_PUNTOS CADENA:xlabel COMA
                            Y_AXIS_LABEL DOS_PUNTOS CADENA:ylabel LLAVE_C LLAVE_C
                            {:  RESULT = new GraficaPuntos(false, new ArrayList<>(coordenadas),title.toString(),xlabel.toString(),ylabel.toString() ,null,null,null ); coordenadas.clear(); :}

;


mas_coordenadas_expandidas ::= COMA LLAVE_A X DOS_PUNTOS CONSTANTE:x COMA Y DOS_PUNTOS CONSTANTE:y COMA SIZE DOS_PUNTOS CONSTANTE:size COMA  COLOR DOS_PUNTOS HEXADECIMAL:color LLAVE_C {:coordenadas.add(new DatosGraficaPuntos(Integer.parseInt(x.toString()),Integer.parseInt(y.toString()),Integer.parseInt(size.toString()), color.toString())); :} mas_coordenadas_expandidas
                               | /*vacio*/ ;


grafica_lineas ::= grafica_lineas_simple:grafica        {:System.out.println("GRAFICA DE LINEAS SIMPLES"+ grafica.toString());  RESULT=grafica;:}
                    | grafica_lineas_expandida:grafica  {: System.out.println("GRAFICA DE LINEAS EXPANDIDA"+ grafica.toString());   RESULT=grafica;:}
                    ;

grafica_lineas_simple ::= NAME DOS_PUNTOS CADENA:nombreSerie COMA POINTS DOS_PUNTOS CORCHETE_A
                            LLAVE_A X DOS_PUNTOS CONSTANTE:x COMA Y DOS_PUNTOS CONSTANTE:y  LLAVE_C {:  coordenadas.add(new DatosGraficaPuntos(Integer.parseInt(x.toString()),Integer.parseInt(y.toString()),null,null));   :}
                             mas_coordenadas_simples CORCHETE_C LLAVE_C {: series.add(new Serie(nombreSerie.toString() , null,new ArrayList<>(coordenadas),null,null)); coordenadas.clear();  :} series_simples CORCHETE_C COMA
                             CHART DOS_PUNTOS LLAVE_A
                                TITLE DOS_PUNTOS CADENA:title COMA
                                X_AXIS_LABEL DOS_PUNTOS CADENA:xlabel COMA
                                Y_AXIS_LABEL DOS_PUNTOS CADENA:ylabel LLAVE_C LLAVE_C
                                {:RESULT= new GraficaLineas(true,new ArrayList<>(series), title.toString(), xlabel.toString(),ylabel.toString(),null,null,null     ); series.clear(); coordenadas.clear(); :}


;

series_simples ::= COMA LLAVE_A NAME DOS_PUNTOS CADENA:nombreSerie COMA POINTS DOS_PUNTOS CORCHETE_A
                    LLAVE_A X DOS_PUNTOS CONSTANTE:x COMA Y DOS_PUNTOS CONSTANTE:y LLAVE_C {: coordenadas.add(new DatosGraficaPuntos(Integer.parseInt(x.toString()),Integer.parseInt(y.toString()),null,null));  :}
                    mas_coordenadas_simples CORCHETE_C LLAVE_C  {: series.add(new Serie(nombreSerie.toString() , null,new ArrayList<>(coordenadas),null,null)); coordenadas.clear();  :} series_simples
                    | /*vacio*/
;


grafica_lineas_expandida ::= NAME DOS_PUNTOS CADENA:nombreSerie COMA POINTS DOS_PUNTOS CORCHETE_A
                            LLAVE_A X DOS_PUNTOS CONSTANTE:x COMA Y DOS_PUNTOS CONSTANTE:y COMA LABEL DOS_PUNTOS CADENA:label LLAVE_C  {: puntosSeries.add(new PuntosSeries(Integer.parseInt(x.toString()),Integer.parseInt(y.toString()),label.toString())); :} mas_coordenadas_label CORCHETE_C COMA
                            COLOR DOS_PUNTOS HEXADECIMAL:color COMA LINE_STYLE DOS_PUNTOS CADENA:lineStyle LLAVE_C {: series.add(new Serie(nombreSerie.toString(), new ArrayList<>(puntosSeries),null,color.toString(),lineStyle.toString()) );   puntosSeries.clear(); :}   series_expandidas CORCHETE_C COMA
                            CHART DOS_PUNTOS LLAVE_A
                            TITLE DOS_PUNTOS CADENA:title COMA
                            X_AXIS_LABEL DOS_PUNTOS CADENA:xlabel COMA
                            Y_AXIS_LABEL DOS_PUNTOS CADENA:ylabel LLAVE_C LLAVE_C
                            {: RESULT = new GraficaLineas(false, new ArrayList<>(series), title.toString(),xlabel.toString(),ylabel.toString(),null,null,null );  puntosSeries.clear(); series.clear();  :}



;

mas_coordenadas_label ::=  COMA LLAVE_A X DOS_PUNTOS CONSTANTE:x COMA Y DOS_PUNTOS CONSTANTE:y COMA LABEL DOS_PUNTOS CADENA:label LLAVE_C {: puntosSeries.add(new PuntosSeries(Integer.parseInt(x.toString()),Integer.parseInt(y.toString()),label.toString())); :} mas_coordenadas_label
                            | /*vacio*/


;

series_expandidas ::= COMA LLAVE_A NAME DOS_PUNTOS CADENA:nombreSerie COMA POINTS DOS_PUNTOS CORCHETE_A
                       LLAVE_A X DOS_PUNTOS CONSTANTE:x COMA Y DOS_PUNTOS CONSTANTE:y COMA LABEL DOS_PUNTOS CADENA:label LLAVE_C {: puntosSeries.add(new PuntosSeries(Integer.parseInt(x.toString()),Integer.parseInt(y.toString()),label.toString())); :} mas_coordenadas_label CORCHETE_C COMA
                       COLOR DOS_PUNTOS HEXADECIMAL:color COMA LINE_STYLE DOS_PUNTOS CADENA:lineStyle  {: series.add(new Serie(nombreSerie.toString(), new ArrayList<>(puntosSeries),null,color.toString(),lineStyle.toString()) );   puntosSeries.clear(); :}  LLAVE_C series_expandidas
                        | /*vacio*/



;

tarjeta_informacion ::=  tarjeta_informacion_simple:tarjeta    {: System.out.println("TARJETA INFORMACION SIMPLE"+tarjeta.toString());                  RESULT=tarjeta;:}
                        | tarjeta_informacion_extendida:tarjeta         {: System.out.println("TARJETA DE INFORMACION EXPANDIDA" +tarjeta.toString());  RESULT=tarjeta;:}
;


tarjeta_informacion_simple ::= VALUE DOS_PUNTOS CONSTANTE:value COMA
                                LABEL DOS_PUNTOS CADENA:label COMA
                                DESCRIPTION DOS_PUNTOS CADENA:descripcion LLAVE_C LLAVE_C
                                {:  RESULT=new TarjetaInformacion(value.toString(),label.toString(), descripcion.toString(),null,null,null      ); :}

;
tarjeta_informacion_extendida ::= VALUE DOS_PUNTOS CONSTANTE:value COMA
                                  LABEL DOS_PUNTOS CADENA:label COMA
                                  DESCRIPTION DOS_PUNTOS CADENA:descripcion COMA
                                  ICON DOS_PUNTOS CADENA:icon COMA
                                  COLOR DOS_PUNTOS HEXADECIMAL:color COMA
                                  LINK DOS_PUNTOS CADENA:link LLAVE_C LLAVE_C
                     {:  RESULT=new TarjetaInformacion(value.toString(),label.toString(), descripcion.toString(),icon.toString(),color.toString(),link.toString()      ); :}


;



// no se ha metido esto xd






asignacion_operacion_id ::= asigancion                                              {:System.out.println("Asignacion");:}
                          | IDENTIFICADOR asignacion_compuesta valor PUNTO_COMA     {:System.out.println("Asignacion Compuesta");:}
                          | incremento_decremento PUNTO_COMA                        {:System.out.println("incremente o decremento");:}


                            ;



asigancion ::= IDENTIFICADOR:id IGUAL valor:val PUNTO_COMA {:
                                                                if(!existeVariable(id.toString())){
                                                                Variable variable=(Variable) val; tablaSimbolos.add(new TablaSImbolos(variable.getTipoVariable(),id.toString(),(String) variable.getValor() ));
                                                                }else{
                                                                System.out.println("YA EXISTE LA VARIABLE");
                                                                }
                                                            :}
                ;


valor ::=  IDENTIFICADOR:val {: RESULT= new Variable(TipoVariable.identificador,val.toString());  :}
          | CONSTANTE:val    {: RESULT= new Variable(TipoVariable.constante,val.toString());  :}
          | TRUE:val        {: RESULT=new Variable(TipoVariable.booleano, val.toString());  :}
          | FALSE:val       {: RESULT=new Variable(TipoVariable.booleano,val.toString());  :}
          | CADENA:val      {: RESULT=new Variable(TipoVariable.cadena,val.toString());  :}
;



operacion ::=  valor operador_artimetico valor
             | incremento_decremento valor
             | IDENTIFICADOR asignacion_compuesta valor


;
asignacion_compuesta ::= MAS IGUAL
                        | MENOS IGUAL
                        | ASTERISCO IGUAL
                        | BARRA IGUAL
;


operador_artimetico ::=   ASTERISCO
                        | BARRA
                        | MENOS
                        | MAS
;




condicion_if ::= IF PARENTESIS_A condicion:cond PARENTESIS_C LLAVE_A

                lista_instrucciones:in

                LLAVE_C

                {: IfCondicional condicionIF = null;


                 if(cond instanceof Boolean){
                    condicionIF = new IfCondicional((Boolean) cond,null,null,null,new ArrayList<>((List<Accion>)in ),null);
                }else{

                Condicional condicion= (Condicional) cond;
                    condicionIF = new IfCondicional(null,condicion.getVal1(),condicion.getComparador(),condicion.getVal2(),new ArrayList<>((List<Accion>)in ),null);


                }

                RESULT= condicionIF;  :}

                | IF PARENTESIS_A condicion:cond  PARENTESIS_C LLAVE_A
                lista_instrucciones:in1

                LLAVE_C
                ELSE LLAVE_A
                lista_instrucciones:in2


                LLAVE_C
                   {: IfCondicional condicionIF = null;


                               if(cond instanceof Boolean){
                                  condicionIF = new IfCondicional((Boolean) cond,null,null,null,new ArrayList<>((List<Accion>)in1 ),new ArrayList<>((List<Accion>)in2 ));
                              }else{

                              Condicional condicion= (Condicional) cond;
                                  condicionIF = new IfCondicional(null,condicion.getVal1(),condicion.getComparador(),condicion.getVal2(),new ArrayList<>((List<Accion>)in1 ),new ArrayList<>((List<Accion>)in2 ));


                              }

                              RESULT= condicionIF;
                   :}

;





bucle_for ::= FOR PARENTESIS_A IDENTIFICADOR:idIncial IGUAL constate_identificador:valorInicial  PUNTO_COMA condicional_for:cond PUNTO_COMA  incremento_decremento:paso PARENTESIS_C LLAVE_A
                    lista_instrucciones:in
                LLAVE_C

            {:
            Condicional condicional =(Condicional)cond;
            IncrementoDecremento pasoFor = (IncrementoDecremento) paso;
            RESULT=new ForCiclo(valorInicial.toString(),condicional.getVal2(), pasoFor.getTipoIncremento(),new ArrayList<>((List<Accion>)in )); :}



;


bucle_while ::= WHILE PARENTESIS_A condicion:cond PARENTESIS_C LLAVE_A
                lista_instrucciones:in
                LLAVE_C
   {: WhileCiclo whileCiclo = null;


                 if(cond instanceof Boolean){
                    whileCiclo = new WhileCiclo((Boolean) cond,null,null,null,new ArrayList<>((List<Accion>)in ));
                }else{

                Condicional condicion= (Condicional) cond;
                    whileCiclo = new WhileCiclo(null,condicion.getVal1(),condicion.getComparador(),condicion.getVal2(),new ArrayList<>((List<Accion>)in ));


                }

                RESULT= whileCiclo;  :}


;

bucle_do_while ::=DO LLAVE_A
                    lista_instrucciones:in

                    LLAVE_C WHILE PARENTESIS_A condicion:cond PARENTESIS_C PUNTO_COMA

{: WhileCiclo whileCiclo = null;


                 if(cond instanceof Boolean){
                    whileCiclo = new WhileCiclo((Boolean) cond,null,null,null,new ArrayList<>((List<Accion>)in ));
                }else{

                Condicional condicion= (Condicional) cond;
                    whileCiclo = new WhileCiclo(null,condicion.getVal1(),condicion.getComparador(),condicion.getVal2(),new ArrayList<>((List<Accion>)in ));


                }

                RESULT= whileCiclo;  :}



;









condicional_for ::= IDENTIFICADOR:val1 MENOR_IGUAL constate_identificador:val2    {:RESULT= new Condicional(val1.toString(),Comparador.MENOR_IGUAL,val2.toString());:}
                    | IDENTIFICADOR:val1 MAYOR_IGUAL constate_identificador:val2    {:RESULT= new Condicional(val1.toString(),Comparador.MAYOR_IGUAL,val2.toString());:}
                    | IDENTIFICADOR:val1 MAYOR_QUE constate_identificador:val2    {:RESULT= new Condicional(val1.toString(),Comparador.MAYOR_QUE,val2.toString());:}
                    | IDENTIFICADOR:val1 MENOR_QUE constate_identificador:val2    {:RESULT= new Condicional(val1.toString(),Comparador.MENOR_QUE,val2.toString());:}

;


condicion ::= booolean:b                                                 {: RESULT=b;:}
            | IDENTIFICADOR:val1 comparador:comp IDENTIFICADOR:val2      {:RESULT=new Condicional(val1.toString(),(Comparador) comp,val2.toString());:}
            | IDENTIFICADOR:val1 comparador:comp CONSTANTE:val2           {:RESULT=new Condicional(val1.toString(),(Comparador) comp,val2.toString());:}
            | IDENTIFICADOR:val1 IGUAL_IGUAL booolean:val2               {:RESULT=new Condicional(val1.toString(),Comparador.IGUAL_IGUAL,val2.toString());:}
            | IDENTIFICADOR:val1 DIFERENTE booolean:val2                 {:RESULT=new Condicional(val1.toString(),Comparador.DIFERENTE,val2.toString());:}
            | IDENTIFICADOR:val1 IGUAL_IGUAL CADENA :val2                {:RESULT=new Condicional(val1.toString(),Comparador.IGUAL_IGUAL,val2.toString());:}

;


booolean ::= TRUE           {:RESULT=true;:}
            | FALSE         {:RESULT=false;:}

;

comparador ::= IGUAL_IGUAL      {:RESULT=Comparador.IGUAL_IGUAL;:}
             | DIFERENTE        {:RESULT=Comparador.DIFERENTE;:}
             | MAYOR_QUE        {:RESULT=Comparador.MAYOR_QUE;:}
             | MENOR_QUE        {:RESULT=Comparador.MENOR_QUE;:}
             | MENOR_IGUAL      {:RESULT=Comparador.MENOR_IGUAL;:}
             | MAYOR_IGUAL      {:RESULT=Comparador.MAYOR_IGUAL;:}


;

constate_identificador ::= IDENTIFICADOR:id {:RESULT=id;:}
                        | CONSTANTE:cons    {: RESULT=cons;:}
;

incremento_decremento ::= IDENTIFICADOR:id MAS MAS         {:RESULT=new IncrementoDecremento(id.toString(),PasoFor.incremento); :}
                        | IDENTIFICADOR:id MENOS MENOS       {:RESULT=new IncrementoDecremento(id.toString(),PasoFor.decremento); :}
;




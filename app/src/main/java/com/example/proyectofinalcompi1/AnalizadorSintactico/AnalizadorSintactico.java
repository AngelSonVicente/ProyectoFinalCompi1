
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.example.proyectofinalcompi1.AnalizadorSintactico;

import java.util.ArrayList;
import java.util.List;
import com.example.proyectofinalcompi1.AnalizadorLexico.*;
import com.example.proyectofinalcompi1.Model.*;
import com.example.proyectofinalcompi1.Model.TablaSImbolos;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\205\000\002\002\004\000\002\071\004\000\002\072" +
    "\003\000\002\072\003\000\002\072\003\000\002\072\003" +
    "\000\002\073\003\000\002\073\002\000\002\073\003\000" +
    "\002\002\056\000\002\003\004\000\002\004\005\000\002" +
    "\004\002\000\002\066\003\000\002\066\004\000\002\067" +
    "\003\000\002\067\003\000\002\067\003\000\002\067\003" +
    "\000\002\067\003\000\002\067\010\000\002\067\010\000" +
    "\002\067\010\000\002\067\010\000\002\067\007\000\002" +
    "\006\003\000\002\006\003\000\002\074\002\000\002\007" +
    "\016\000\002\075\002\000\002\010\016\000\002\010\002" +
    "\000\002\076\002\000\002\011\042\000\002\077\002\000" +
    "\002\012\022\000\002\012\002\000\002\013\003\000\002" +
    "\013\003\000\002\100\002\000\002\014\016\000\002\101" +
    "\002\000\002\016\016\000\002\016\002\000\002\102\002" +
    "\000\002\015\036\000\002\103\002\000\002\017\022\000" +
    "\002\017\002\000\002\020\003\000\002\020\003\000\002" +
    "\104\002\000\002\021\016\000\002\105\002\000\002\023" +
    "\016\000\002\023\002\000\002\106\002\000\002\022\046" +
    "\000\002\107\002\000\002\024\026\000\002\024\002\000" +
    "\002\031\003\000\002\031\003\000\002\110\002\000\002" +
    "\111\002\000\002\025\052\000\002\112\002\000\002\113" +
    "\002\000\002\027\032\000\002\027\002\000\002\114\002" +
    "\000\002\115\002\000\002\026\066\000\002\116\002\000" +
    "\002\032\022\000\002\032\002\000\002\117\002\000\002" +
    "\120\002\000\002\030\046\000\002\030\002\000\002\035" +
    "\003\000\002\035\003\000\002\033\017\000\002\034\033" +
    "\000\002\065\003\000\002\065\006\000\002\065\006\000" +
    "\002\065\006\000\002\036\006\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\003\000\002\040\005\000\002\040\004\000\002\040\005" +
    "\000\002\063\004\000\002\063\004\000\002\063\004\000" +
    "\002\063\004\000\002\062\003\000\002\062\003\000\002" +
    "\062\003\000\002\062\003\000\002\041\011\000\002\041" +
    "\015\000\002\045\017\000\002\051\011\000\002\052\013" +
    "\000\002\046\005\000\002\046\005\000\002\046\005\000" +
    "\002\046\005\000\002\042\003\000\002\042\005\000\002" +
    "\042\005\000\002\042\005\000\002\042\005\000\002\042" +
    "\005\000\002\042\005\000\002\043\003\000\002\043\003" +
    "\000\002\044\003\000\002\044\003\000\002\044\003\000" +
    "\002\044\003\000\002\044\003\000\002\044\003\000\002" +
    "\047\003\000\002\047\003\000\002\050\005\000\002\050" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0239\000\010\002\ufffa\003\005\052\010\001\002\000" +
    "\004\002\u023b\001\002\000\012\052\u023a\053\u0236\054\u0239" +
    "\055\u0238\001\002\000\004\002\ufff9\001\002\000\004\002" +
    "\ufffb\001\002\000\004\004\011\001\002\000\004\047\012" +
    "\001\002\000\004\073\013\001\002\000\004\045\014\001" +
    "\002\000\004\005\015\001\002\000\004\047\016\001\002" +
    "\000\004\073\017\001\002\000\004\045\020\001\002\000" +
    "\004\006\021\001\002\000\004\047\022\001\002\000\004" +
    "\054\023\001\002\000\004\073\025\001\002\000\004\055" +
    "\032\001\002\000\006\045\026\055\ufff5\001\002\000\004" +
    "\073\030\001\002\000\004\055\ufff7\001\002\000\006\045" +
    "\026\055\ufff5\001\002\000\004\055\ufff6\001\002\000\004" +
    "\045\033\001\002\000\004\007\034\001\002\000\004\047" +
    "\035\001\002\000\004\052\036\001\002\000\004\004\037" +
    "\001\002\000\004\047\040\001\002\000\004\073\041\001" +
    "\002\000\004\053\042\001\002\000\004\045\043\001\002" +
    "\000\004\010\044\001\002\000\004\047\045\001\002\000" +
    "\004\052\046\001\002\000\004\073\047\001\002\000\004" +
    "\047\050\001\002\000\004\073\051\001\002\000\004\053" +
    "\052\001\002\000\004\045\053\001\002\000\004\011\054" +
    "\001\002\000\004\047\055\001\002\000\004\071\056\001" +
    "\002\000\004\045\057\001\002\000\004\012\060\001\002" +
    "\000\004\047\061\001\002\000\004\073\062\001\002\000" +
    "\004\045\063\001\002\000\004\013\064\001\002\000\004" +
    "\047\065\001\002\000\004\073\066\001\002\000\016\037" +
    "\100\041\072\042\067\043\102\052\077\070\104\001\002" +
    "\000\004\050\u0230\001\002\000\020\037\ufff0\041\ufff0\042" +
    "\ufff0\043\ufff0\052\ufff0\053\ufff0\070\ufff0\001\002\000\020" +
    "\037\uffee\041\uffee\042\uffee\043\uffee\052\uffee\053\uffee\070" +
    "\uffee\001\002\000\004\050\u0214\001\002\000\020\037\uffef" +
    "\041\uffef\042\uffef\043\uffef\052\uffef\053\uffef\070\uffef\001" +
    "\002\000\020\037\uffad\041\uffad\042\uffad\043\uffad\052\uffad" +
    "\053\uffad\070\uffad\001\002\000\020\037\ufff1\041\ufff1\042" +
    "\ufff1\043\ufff1\052\ufff1\053\ufff1\070\ufff1\001\002\000\020" +
    "\037\ufff4\041\ufff4\042\ufff4\043\ufff4\052\ufff4\053\ufff4\070" +
    "\ufff4\001\002\000\004\014\205\001\002\000\004\050\173" +
    "\001\002\000\020\037\ufff2\041\ufff2\042\ufff2\043\ufff2\052" +
    "\ufff2\053\ufff2\070\ufff2\001\002\000\004\052\136\001\002" +
    "\000\020\037\100\041\072\042\067\043\102\052\077\053" +
    "\134\070\104\001\002\000\014\044\105\056\110\062\107" +
    "\066\106\067\111\001\002\000\004\062\133\001\002\000" +
    "\006\062\131\066\130\001\002\000\014\070\115\073\120" +
    "\074\114\075\117\076\116\001\002\000\004\062\125\001" +
    "\002\000\006\062\122\067\123\001\002\000\014\070\115" +
    "\073\120\074\114\075\117\076\116\001\002\000\004\046" +
    "\121\001\002\000\004\046\uffa6\001\002\000\004\046\uffa8" +
    "\001\002\000\004\046\uffa7\001\002\000\004\046\uffa5\001" +
    "\002\000\004\046\uffa4\001\002\000\020\037\uffac\041\uffac" +
    "\042\uffac\043\uffac\052\uffac\053\uffac\070\uffac\001\002\000" +
    "\014\070\uff9f\073\uff9f\074\uff9f\075\uff9f\076\uff9f\001\002" +
    "\000\004\046\124\001\002\000\020\037\uffaa\041\uffaa\042" +
    "\uffaa\043\uffaa\052\uffaa\053\uffaa\070\uffaa\001\002\000\014" +
    "\070\uff9d\073\uff9d\074\uff9d\075\uff9d\076\uff9d\001\002\000" +
    "\004\046\127\001\002\000\020\037\uffa9\041\uffa9\042\uffa9" +
    "\043\uffa9\052\uffa9\053\uffa9\070\uffa9\001\002\000\004\046" +
    "\132\001\002\000\014\070\uffa0\073\uffa0\074\uffa0\075\uffa0" +
    "\076\uffa0\001\002\000\020\037\uffab\041\uffab\042\uffab\043" +
    "\uffab\052\uffab\053\uffab\070\uffab\001\002\000\014\070\uff9e" +
    "\073\uff9e\074\uff9e\075\uff9e\076\uff9e\001\002\000\004\002" +
    "\ufff8\001\002\000\020\037\ufff3\041\ufff3\042\ufff3\043\ufff3" +
    "\052\ufff3\053\ufff3\070\ufff3\001\002\000\016\037\100\041" +
    "\072\042\067\043\102\052\077\070\104\001\002\000\020" +
    "\037\100\041\072\042\067\043\102\052\077\053\140\070" +
    "\104\001\002\000\004\042\141\001\002\000\004\050\142" +
    "\001\002\000\012\070\145\074\144\075\150\076\146\001" +
    "\002\000\004\051\uff8f\001\002\000\004\051\uff88\001\002" +
    "\000\016\057\157\060\160\061\164\063\163\064\155\065" +
    "\153\001\002\000\016\057\157\060\160\061\156\063\154" +
    "\064\155\065\153\001\002\000\004\051\151\001\002\000" +
    "\004\051\uff87\001\002\000\004\046\152\001\002\000\020" +
    "\037\uff94\041\uff94\042\uff94\043\uff94\052\uff94\053\uff94\070" +
    "\uff94\001\002\000\006\070\uff84\076\uff84\001\002\000\004" +
    "\076\uff86\001\002\000\006\070\uff83\076\uff83\001\002\000" +
    "\004\076\uff85\001\002\000\006\070\uff82\076\uff82\001\002" +
    "\000\006\070\uff81\076\uff81\001\002\000\004\076\162\001" +
    "\002\000\004\051\uff8e\001\002\000\014\070\uff86\073\172" +
    "\074\144\075\150\076\uff86\001\002\000\012\070\uff85\074" +
    "\144\075\150\076\uff85\001\002\000\006\070\166\076\167" +
    "\001\002\000\004\051\uff8d\001\002\000\004\051\uff8c\001" +
    "\002\000\004\051\uff8a\001\002\000\004\051\uff8b\001\002" +
    "\000\004\051\uff89\001\002\000\012\070\145\074\144\075" +
    "\150\076\146\001\002\000\004\051\175\001\002\000\004" +
    "\052\176\001\002\000\016\037\100\041\072\042\067\043" +
    "\102\052\077\070\104\001\002\000\020\037\100\041\072" +
    "\042\067\043\102\052\077\053\200\070\104\001\002\000" +
    "\022\037\uff98\040\201\041\uff98\042\uff98\043\uff98\052\uff98" +
    "\053\uff98\070\uff98\001\002\000\004\052\202\001\002\000" +
    "\016\037\100\041\072\042\067\043\102\052\077\070\104" +
    "\001\002\000\020\037\100\041\072\042\067\043\102\052" +
    "\077\053\204\070\104\001\002\000\020\037\uff97\041\uff97" +
    "\042\uff97\043\uff97\052\uff97\053\uff97\070\uff97\001\002\000" +
    "\004\047\206\001\002\000\006\052\207\054\210\001\002" +
    "\000\004\016\u01f9\001\002\000\004\052\211\001\002\000" +
    "\012\015\216\024\214\027\231\034\222\001\002\000\020" +
    "\037\uffed\041\uffed\042\uffed\043\uffed\052\uffed\053\uffed\070" +
    "\uffed\001\002\000\020\037\uffeb\041\uffeb\042\uffeb\043\uffeb" +
    "\052\uffeb\053\uffeb\070\uffeb\001\002\000\004\047\u01ba\001" +
    "\002\000\020\037\uffe7\041\uffe7\042\uffe7\043\uffe7\052\uffe7" +
    "\053\uffe7\070\uffe7\001\002\000\004\047\u017a\001\002\000" +
    "\020\037\uffc4\041\uffc4\042\uffc4\043\uffc4\052\uffc4\053\uffc4" +
    "\070\uffc4\001\002\000\020\037\uffcf\041\uffcf\042\uffcf\043" +
    "\uffcf\052\uffcf\053\uffcf\070\uffcf\001\002\000\020\037\uffe8" +
    "\041\uffe8\042\uffe8\043\uffe8\052\uffe8\053\uffe8\070\uffe8\001" +
    "\002\000\004\047\u013e\001\002\000\020\037\uffea\041\uffea" +
    "\042\uffea\043\uffea\052\uffea\053\uffea\070\uffea\001\002\000" +
    "\020\037\uffdc\041\uffdc\042\uffdc\043\uffdc\052\uffdc\053\uffdc" +
    "\070\uffdc\001\002\000\020\037\uffdb\041\uffdb\042\uffdb\043" +
    "\uffdb\052\uffdb\053\uffdb\070\uffdb\001\002\000\020\037\uffd0" +
    "\041\uffd0\042\uffd0\043\uffd0\052\uffd0\053\uffd0\070\uffd0\001" +
    "\002\000\020\037\uffec\041\uffec\042\uffec\043\uffec\052\uffec" +
    "\053\uffec\070\uffec\001\002\000\020\037\uffc3\041\uffc3\042" +
    "\uffc3\043\uffc3\052\uffc3\053\uffc3\070\uffc3\001\002\000\004" +
    "\047\232\001\002\000\004\073\233\001\002\000\004\045" +
    "\234\001\002\000\004\030\235\001\002\000\004\047\236" +
    "\001\002\000\004\054\237\001\002\000\004\052\240\001" +
    "\002\000\004\024\241\001\002\000\004\047\242\001\002" +
    "\000\004\076\243\001\002\000\004\045\244\001\002\000" +
    "\004\025\245\001\002\000\004\047\246\001\002\000\004" +
    "\076\247\001\002\000\006\045\250\053\251\001\002\000" +
    "\004\034\346\001\002\000\006\045\uffc2\055\uffc2\001\002" +
    "\000\006\045\253\055\uffca\001\002\000\004\052\333\001" +
    "\002\000\004\055\255\001\002\000\004\053\256\001\002" +
    "\000\006\045\uffc1\055\uffc1\001\002\000\006\045\260\055" +
    "\uffbc\001\002\000\004\052\304\001\002\000\004\055\262" +
    "\001\002\000\004\045\263\001\002\000\004\020\264\001" +
    "\002\000\004\047\265\001\002\000\004\052\266\001\002" +
    "\000\004\004\267\001\002\000\004\047\270\001\002\000" +
    "\004\073\271\001\002\000\004\045\272\001\002\000\004" +
    "\021\273\001\002\000\004\047\274\001\002\000\004\073" +
    "\275\001\002\000\004\045\276\001\002\000\004\022\277" +
    "\001\002\000\004\047\300\001\002\000\004\073\301\001" +
    "\002\000\004\053\302\001\002\000\004\053\303\001\002" +
    "\000\020\037\uffc0\041\uffc0\042\uffc0\043\uffc0\052\uffc0\053" +
    "\uffc0\070\uffc0\001\002\000\004\027\305\001\002\000\004" +
    "\047\306\001\002\000\004\073\307\001\002\000\004\045" +
    "\310\001\002\000\004\030\311\001\002\000\004\047\312" +
    "\001\002\000\004\054\313\001\002\000\004\052\314\001" +
    "\002\000\004\024\315\001\002\000\004\047\316\001\002" +
    "\000\004\076\317\001\002\000\004\045\320\001\002\000" +
    "\004\025\321\001\002\000\004\047\322\001\002\000\004" +
    "\076\323\001\002\000\004\053\324\001\002\000\006\045" +
    "\uffbf\055\uffbf\001\002\000\006\045\253\055\uffca\001\002" +
    "\000\004\055\327\001\002\000\004\053\330\001\002\000" +
    "\006\045\uffbe\055\uffbe\001\002\000\006\045\260\055\uffbc" +
    "\001\002\000\004\055\uffbd\001\002\000\004\024\334\001" +
    "\002\000\004\047\335\001\002\000\004\076\336\001\002" +
    "\000\004\045\337\001\002\000\004\025\340\001\002\000" +
    "\004\047\341\001\002\000\004\076\342\001\002\000\004" +
    "\053\343\001\002\000\006\045\uffcc\055\uffcc\001\002\000" +
    "\006\045\253\055\uffca\001\002\000\004\055\uffcb\001\002" +
    "\000\004\047\347\001\002\000\004\073\350\001\002\000" +
    "\004\053\351\001\002\000\006\045\uffbb\055\uffbb\001\002" +
    "\000\006\045\353\055\uffb6\001\002\000\004\052\u012f\001" +
    "\002\000\004\055\355\001\002\000\004\045\356\001\002" +
    "\000\004\017\357\001\002\000\004\047\360\001\002\000" +
    "\004\071\361\001\002\000\004\045\362\001\002\000\004" +
    "\031\363\001\002\000\004\047\364\001\002\000\004\073" +
    "\365\001\002\000\004\053\366\001\002\000\006\045\uffba" +
    "\055\uffba\001\002\000\006\045\371\055\uffb2\001\002\000" +
    "\004\055\u011d\001\002\000\004\052\372\001\002\000\004" +
    "\027\373\001\002\000\004\047\374\001\002\000\004\073" +
    "\375\001\002\000\004\045\376\001\002\000\004\030\377" +
    "\001\002\000\004\047\u0100\001\002\000\004\054\u0101\001" +
    "\002\000\004\052\u0102\001\002\000\004\024\u0103\001\002" +
    "\000\004\047\u0104\001\002\000\004\076\u0105\001\002\000" +
    "\004\045\u0106\001\002\000\004\025\u0107\001\002\000\004" +
    "\047\u0108\001\002\000\004\076\u0109\001\002\000\004\045" +
    "\u010a\001\002\000\004\034\u010b\001\002\000\004\047\u010c" +
    "\001\002\000\004\073\u010d\001\002\000\004\053\u010e\001" +
    "\002\000\006\045\uffb5\055\uffb5\001\002\000\006\045\353" +
    "\055\uffb6\001\002\000\004\055\u0111\001\002\000\004\045" +
    "\u0112\001\002\000\004\017\u0113\001\002\000\004\047\u0114" +
    "\001\002\000\004\071\u0115\001\002\000\004\045\u0116\001" +
    "\002\000\004\031\u0117\001\002\000\004\047\u0118\001\002" +
    "\000\004\073\u0119\001\002\000\004\053\uffb4\001\002\000" +
    "\004\053\u011b\001\002\000\006\045\371\055\uffb2\001\002" +
    "\000\004\055\uffb3\001\002\000\004\045\u011e\001\002\000" +
    "\004\020\u011f\001\002\000\004\047\u0120\001\002\000\004" +
    "\052\u0121\001\002\000\004\004\u0122\001\002\000\004\047" +
    "\u0123\001\002\000\004\073\u0124\001\002\000\004\045\u0125" +
    "\001\002\000\004\021\u0126\001\002\000\004\047\u0127\001" +
    "\002\000\004\073\u0128\001\002\000\004\045\u0129\001\002" +
    "\000\004\022\u012a\001\002\000\004\047\u012b\001\002\000" +
    "\004\073\u012c\001\002\000\004\053\u012d\001\002\000\004" +
    "\053\u012e\001\002\000\020\037\uffb9\041\uffb9\042\uffb9\043" +
    "\uffb9\052\uffb9\053\uffb9\070\uffb9\001\002\000\004\024\u0130" +
    "\001\002\000\004\047\u0131\001\002\000\004\076\u0132\001" +
    "\002\000\004\045\u0133\001\002\000\004\025\u0134\001\002" +
    "\000\004\047\u0135\001\002\000\004\076\u0136\001\002\000" +
    "\004\045\u0137\001\002\000\004\034\u0138\001\002\000\004" +
    "\047\u0139\001\002\000\004\073\u013a\001\002\000\004\053" +
    "\u013b\001\002\000\006\045\uffb8\055\uffb8\001\002\000\006" +
    "\045\353\055\uffb6\001\002\000\004\055\uffb7\001\002\000" +
    "\004\073\u013f\001\002\000\004\045\u0140\001\002\000\004" +
    "\016\u0141\001\002\000\004\047\u0142\001\002\000\004\076" +
    "\u0143\001\002\000\006\045\u0144\053\u0145\001\002\000\004" +
    "\017\u0156\001\002\000\006\045\uffda\055\uffda\001\002\000" +
    "\006\045\u0147\055\uffd6\001\002\000\004\052\u014b\001\002" +
    "\000\004\055\u0149\001\002\000\004\053\u014a\001\002\000" +
    "\020\037\uffd9\041\uffd9\042\uffd9\043\uffd9\052\uffd9\053\uffd9" +
    "\070\uffd9\001\002\000\004\034\u014c\001\002\000\004\047" +
    "\u014d\001\002\000\004\073\u014e\001\002\000\004\045\u014f" +
    "\001\002\000\004\016\u0150\001\002\000\004\047\u0151\001" +
    "\002\000\004\076\u0152\001\002\000\004\053\u0153\001\002" +
    "\000\006\045\uffd8\055\uffd8\001\002\000\006\045\u0147\055" +
    "\uffd6\001\002\000\004\055\uffd7\001\002\000\004\047\u0157" +
    "\001\002\000\004\071\u0158\001\002\000\004\053\u0159\001" +
    "\002\000\006\045\uffd5\055\uffd5\001\002\000\006\045\u015b" +
    "\055\uffd1\001\002\000\004\052\u016b\001\002\000\004\055" +
    "\u015d\001\002\000\004\045\u015e\001\002\000\004\020\u015f" +
    "\001\002\000\004\047\u0160\001\002\000\004\052\u0161\001" +
    "\002\000\004\004\u0162\001\002\000\004\047\u0163\001\002" +
    "\000\004\073\u0164\001\002\000\004\045\u0165\001\002\000" +
    "\004\023\u0166\001\002\000\004\047\u0167\001\002\000\004" +
    "\073\u0168\001\002\000\004\053\u0169\001\002\000\004\053" +
    "\u016a\001\002\000\020\037\uffd4\041\uffd4\042\uffd4\043\uffd4" +
    "\052\uffd4\053\uffd4\070\uffd4\001\002\000\004\034\u016c\001" +
    "\002\000\004\047\u016d\001\002\000\004\073\u016e\001\002" +
    "\000\004\045\u016f\001\002\000\004\016\u0170\001\002\000" +
    "\004\047\u0171\001\002\000\004\076\u0172\001\002\000\004" +
    "\045\u0173\001\002\000\004\017\u0174\001\002\000\004\047" +
    "\u0175\001\002\000\004\071\u0176\001\002\000\004\053\u0177" +
    "\001\002\000\006\045\uffd3\055\uffd3\001\002\000\006\045" +
    "\u015b\055\uffd1\001\002\000\004\055\uffd2\001\002\000\004" +
    "\073\u017b\001\002\000\004\045\u017c\001\002\000\004\016" +
    "\u017d\001\002\000\004\047\u017e\001\002\000\004\076\u017f" +
    "\001\002\000\006\045\u0180\053\u0181\001\002\000\004\017" +
    "\u0192\001\002\000\006\045\uffe6\055\uffe6\001\002\000\006" +
    "\045\u0183\055\uffe2\001\002\000\004\052\u0187\001\002\000" +
    "\004\055\u0185\001\002\000\004\053\u0186\001\002\000\020" +
    "\037\uffe5\041\uffe5\042\uffe5\043\uffe5\052\uffe5\053\uffe5\070" +
    "\uffe5\001\002\000\004\015\u0188\001\002\000\004\047\u0189" +
    "\001\002\000\004\073\u018a\001\002\000\004\045\u018b\001" +
    "\002\000\004\016\u018c\001\002\000\004\047\u018d\001\002" +
    "\000\004\076\u018e\001\002\000\004\053\u018f\001\002\000" +
    "\006\045\uffe4\055\uffe4\001\002\000\006\045\u0183\055\uffe2" +
    "\001\002\000\004\055\uffe3\001\002\000\004\047\u0193\001" +
    "\002\000\004\071\u0194\001\002\000\004\053\u0195\001\002" +
    "\000\006\045\uffe1\055\uffe1\001\002\000\006\045\u0198\055" +
    "\uffdd\001\002\000\004\055\u01a8\001\002\000\004\052\u0199" +
    "\001\002\000\004\015\u019a\001\002\000\004\047\u019b\001" +
    "\002\000\004\073\u019c\001\002\000\004\045\u019d\001\002" +
    "\000\004\016\u019e\001\002\000\004\047\u019f\001\002\000" +
    "\004\076\u01a0\001\002\000\004\045\u01a1\001\002\000\004" +
    "\017\u01a2\001\002\000\004\047\u01a3\001\002\000\004\071" +
    "\u01a4\001\002\000\004\053\u01a5\001\002\000\006\045\uffdf" +
    "\055\uffdf\001\002\000\006\045\u0198\055\uffdd\001\002\000" +
    "\004\055\uffde\001\002\000\004\045\u01a9\001\002\000\004" +
    "\020\u01aa\001\002\000\004\047\u01ab\001\002\000\004\052" +
    "\u01ac\001\002\000\004\004\u01ad\001\002\000\004\047\u01ae" +
    "\001\002\000\004\073\u01af\001\002\000\004\045\u01b0\001" +
    "\002\000\004\021\u01b1\001\002\000\004\047\u01b2\001\002" +
    "\000\004\073\u01b3\001\002\000\004\045\u01b4\001\002\000" +
    "\004\022\u01b5\001\002\000\004\047\u01b6\001\002\000\004" +
    "\073\u01b7\001\002\000\004\053\u01b8\001\002\000\004\053" +
    "\u01b9\001\002\000\020\037\uffe0\041\uffe0\042\uffe0\043\uffe0" +
    "\052\uffe0\053\uffe0\070\uffe0\001\002\000\004\076\u01bb\001" +
    "\002\000\004\045\u01bc\001\002\000\004\025\u01bd\001\002" +
    "\000\004\047\u01be\001\002\000\004\076\u01bf\001\002\000" +
    "\006\045\u01c0\053\u01c1\001\002\000\004\026\u01c6\001\002" +
    "\000\006\045\uffce\055\uffce\001\002\000\006\045\253\055" +
    "\uffca\001\002\000\004\055\u01c4\001\002\000\004\053\u01c5" +
    "\001\002\000\020\037\uffcd\041\uffcd\042\uffcd\043\uffcd\052" +
    "\uffcd\053\uffcd\070\uffcd\001\002\000\004\047\u01c7\001\002" +
    "\000\004\076\u01c8\001\002\000\004\045\u01c9\001\002\000" +
    "\004\017\u01ca\001\002\000\004\047\u01cb\001\002\000\004" +
    "\071\u01cc\001\002\000\004\053\u01cd\001\002\000\006\045" +
    "\uffc9\055\uffc9\001\002\000\006\045\u01cf\055\uffc5\001\002" +
    "\000\004\052\u01e3\001\002\000\004\055\u01d1\001\002\000" +
    "\004\045\u01d2\001\002\000\004\020\u01d3\001\002\000\004" +
    "\047\u01d4\001\002\000\004\052\u01d5\001\002\000\004\004" +
    "\u01d6\001\002\000\004\047\u01d7\001\002\000\004\073\u01d8" +
    "\001\002\000\004\045\u01d9\001\002\000\004\021\u01da\001" +
    "\002\000\004\047\u01db\001\002\000\004\073\u01dc\001\002" +
    "\000\004\045\u01dd\001\002\000\004\022\u01de\001\002\000" +
    "\004\047\u01df\001\002\000\004\073\u01e0\001\002\000\004" +
    "\053\u01e1\001\002\000\004\053\u01e2\001\002\000\020\037" +
    "\uffc8\041\uffc8\042\uffc8\043\uffc8\052\uffc8\053\uffc8\070\uffc8" +
    "\001\002\000\004\024\u01e4\001\002\000\004\047\u01e5\001" +
    "\002\000\004\076\u01e6\001\002\000\004\045\u01e7\001\002" +
    "\000\004\025\u01e8\001\002\000\004\047\u01e9\001\002\000" +
    "\004\076\u01ea\001\002\000\004\045\u01eb\001\002\000\004" +
    "\026\u01ec\001\002\000\004\047\u01ed\001\002\000\004\076" +
    "\u01ee\001\002\000\004\045\u01ef\001\002\000\004\017\u01f0" +
    "\001\002\000\004\047\u01f1\001\002\000\004\071\u01f2\001" +
    "\002\000\004\053\u01f3\001\002\000\006\045\uffc7\055\uffc7" +
    "\001\002\000\006\045\u01cf\055\uffc5\001\002\000\004\055" +
    "\uffc6\001\002\000\020\037\uffb0\041\uffb0\042\uffb0\043\uffb0" +
    "\052\uffb0\053\uffb0\070\uffb0\001\002\000\020\037\uffe9\041" +
    "\uffe9\042\uffe9\043\uffe9\052\uffe9\053\uffe9\070\uffe9\001\002" +
    "\000\020\037\uffb1\041\uffb1\042\uffb1\043\uffb1\052\uffb1\053" +
    "\uffb1\070\uffb1\001\002\000\004\047\u01fa\001\002\000\004" +
    "\076\u01fb\001\002\000\004\045\u01fc\001\002\000\004\034" +
    "\u01fd\001\002\000\004\047\u01fe\001\002\000\004\073\u01ff" +
    "\001\002\000\004\045\u0200\001\002\000\004\005\u0201\001" +
    "\002\000\004\047\u0202\001\002\000\004\073\u0203\001\002" +
    "\000\006\045\u0204\053\u0205\001\002\000\004\035\u0207\001" +
    "\002\000\004\053\u0206\001\002\000\020\037\uffaf\041\uffaf" +
    "\042\uffaf\043\uffaf\052\uffaf\053\uffaf\070\uffaf\001\002\000" +
    "\004\047\u0208\001\002\000\004\073\u0209\001\002\000\004" +
    "\045\u020a\001\002\000\004\017\u020b\001\002\000\004\047" +
    "\u020c\001\002\000\004\071\u020d\001\002\000\004\045\u020e" +
    "\001\002\000\004\036\u020f\001\002\000\004\047\u0210\001" +
    "\002\000\004\073\u0211\001\002\000\004\053\u0212\001\002" +
    "\000\004\053\u0213\001\002\000\020\037\uffae\041\uffae\042" +
    "\uffae\043\uffae\052\uffae\053\uffae\070\uffae\001\002\000\004" +
    "\070\u0215\001\002\000\004\062\u0216\001\002\000\006\070" +
    "\u0217\076\u0218\001\002\000\004\046\uff80\001\002\000\004" +
    "\046\uff7f\001\002\000\004\046\u021a\001\002\000\004\070" +
    "\u021b\001\002\000\012\057\u022a\060\u022b\064\u0229\065\u0228" +
    "\001\002\000\004\046\u021d\001\002\000\004\070\u021e\001" +
    "\002\000\006\066\u0224\067\u0225\001\002\000\004\051\u0220" +
    "\001\002\000\004\052\u0221\001\002\000\016\037\100\041" +
    "\072\042\067\043\102\052\077\070\104\001\002\000\020" +
    "\037\100\041\072\042\067\043\102\052\077\053\u0223\070" +
    "\104\001\002\000\020\037\uff96\041\uff96\042\uff96\043\uff96" +
    "\052\uff96\053\uff96\070\uff96\001\002\000\004\066\u0227\001" +
    "\002\000\004\067\u0226\001\002\000\004\051\uff7d\001\002" +
    "\000\004\051\uff7e\001\002\000\006\070\u0217\076\u0218\001" +
    "\002\000\006\070\u0217\076\u0218\001\002\000\006\070\u0217" +
    "\076\u0218\001\002\000\006\070\u0217\076\u0218\001\002\000" +
    "\004\046\uff92\001\002\000\004\046\uff93\001\002\000\004" +
    "\046\uff90\001\002\000\004\046\uff91\001\002\000\012\070" +
    "\145\074\144\075\150\076\146\001\002\000\004\051\u0232" +
    "\001\002\000\004\052\u0233\001\002\000\016\037\100\041" +
    "\072\042\067\043\102\052\077\070\104\001\002\000\020" +
    "\037\100\041\072\042\067\043\102\052\077\053\u0235\070" +
    "\104\001\002\000\020\037\uff95\041\uff95\042\uff95\043\uff95" +
    "\052\uff95\053\uff95\070\uff95\001\002\000\004\002\ufffe\001" +
    "\002\000\004\002\000\001\002\000\004\002\ufffc\001\002" +
    "\000\004\002\ufffd\001\002\000\004\002\uffff\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0239\000\010\002\006\071\005\073\003\001\001\000" +
    "\002\001\001\000\004\072\u0236\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\023" +
    "\001\001\000\002\001\001\000\004\004\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\036\073\041\074\045\070\051\067\052\072\065\100" +
    "\066\102\067\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\036\073\041\074\045\070\051\067\052" +
    "\072\065\100\067\134\001\001\000\004\063\111\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\036\073\041\074\045\070\051\067\052\072\065" +
    "\100\066\136\067\075\001\001\000\020\036\073\041\074" +
    "\045\070\051\067\052\072\065\100\067\134\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\042\146\043\142" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\044" +
    "\164\001\001\000\004\044\160\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\043\170\001\001\000\004" +
    "\043\167\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\042\173\043\142\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\036\073\041\074\045\070" +
    "\051\067\052\072\065\100\066\176\067\075\001\001\000" +
    "\020\036\073\041\074\045\070\051\067\052\072\065\100" +
    "\067\134\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\036\073\041\074\045\070\051\067\052\072\065\100" +
    "\066\202\067\075\001\001\000\020\036\073\041\074\045" +
    "\070\051\067\052\072\065\100\067\134\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\033" +
    "\u01f7\034\u01f5\035\u01f6\001\001\000\002\001\001\000\032" +
    "\006\211\007\220\011\214\013\226\014\223\015\224\020" +
    "\212\021\225\022\217\025\216\026\227\031\222\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\110\251\001\001" +
    "\000\004\023\253\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\111\256\001\001\000\004" +
    "\027\260\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\112\324\001\001\000\004" +
    "\023\325\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\113\330\001\001\000\004\027\331\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\105\343\001" +
    "\001\000\004\023\344\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\114" +
    "\351\001\001\000\004\032\353\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\115\366\001\001\000\004\030\367\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\117" +
    "\u010e\001\001\000\004\032\u010f\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\120\u0119\001\001\000" +
    "\002\001\001\000\004\030\u011b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\116\u013b\001\001\000\004\032\u013c" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\100\u0145\001" +
    "\001\000\004\016\u0147\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\101\u0153\001\001\000\004\016\u0154" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\102\u0159\001\001\000\004" +
    "\017\u015b\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\103\u0177\001\001\000\004\017\u0178\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\074\u0181\001\001\000\004\010" +
    "\u0183\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\075\u018f\001\001\000\004\010\u0190\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\076\u0195\001\001\000\004\012\u0196\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\077\u01a5\001\001\000\004\012" +
    "\u01a6\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\104\u01c1\001\001\000\004\023\u01c2" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\106\u01cd\001\001\000\004\024\u01cf" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\107\u01f3\001\001\000\004\024\u01f4" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\047\u0218\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\046\u021b" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\050" +
    "\u021e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\036\073\041\074\045\070\051\067\052" +
    "\072\065\100\066\u0221\067\075\001\001\000\020\036\073" +
    "\041\074\045\070\051\067\052\072\065\100\067\134\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\047\u022e\001" +
    "\001\000\004\047\u022d\001\001\000\004\047\u022c\001\001" +
    "\000\004\047\u022b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\042\u0230" +
    "\043\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\036\073\041\074\045\070\051\067\052\072\065\100" +
    "\066\u0233\067\075\001\001\000\020\036\073\041\074\045" +
    "\070\051\067\052\072\065\100\067\134\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // Connect this parser to a scanner!
  public AnalizadorSintactico(analizadorLexico lex) {
	    super(lex);
	  }





String Errores;

public void syntax_error(Symbol cur_token) {
    StringBuilder error = new StringBuilder();
    error.append("ERROR SINTACTICO EN : ").append(symbl_name_from_id(cur_token.sym)).append("\n");
    error.append("Linea ").append(cur_token.left).append("\n");
    error.append("Columna ").append(cur_token.right).append("\n");
    if (cur_token.value != null) {
            error.append("Lexema: ").append(cur_token.value).append("\n");
        }



Errores=error.toString();
    System.out.println(error.toString());
}


private List<TablaSImbolos> tablaSimbolos= new ArrayList<>();
private List<DatosGraficaBarras> datosGraficaBarras = new ArrayList<>();
private List<DatosGraficaPuntos> coordenadas = new ArrayList<>();
private List<Serie> series = new ArrayList<>();
private List<PuntosSeries> puntosSeries= new ArrayList<>();
private List<Accion>  accionList = new ArrayList<>();


public String getErrores(){
return Errores;
}


public List<TablaSImbolos> getTablaSimbolos(){
return tablaSimbolos;
}

public List<Accion> getAcciones(){
return accionList;
}

private boolean existeVariable(String variable){
  for(TablaSImbolos tabla: tablaSimbolos){
    if(tabla.getIdentificaor().equals(variable)){
    //setear el valor tambien

      return true;
    }
  }
  return false;
}











/*
public void unrecovered_syntax_error(Symbol cur_token) {
            System.out.println("Error irrecuperable sobrecargado");
        }*/


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action_part00000000(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= accion EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // recuperarse ::= error recuperar 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("recuperarse",55, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // recuperar ::= LLAVE_A 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("recuperar",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // recuperar ::= LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("recuperar",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // recuperar ::= CORCHETE_A 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("recuperar",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // recuperar ::= CORCHETE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("recuperar",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // accion ::= inicio 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("accion",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // accion ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("accion",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // accion ::= recuperarse 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("accion",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // inicio ::= LLAVE_A TITLE DOS_PUNTOS CADENA COMA DESCRIPTION DOS_PUNTOS CADENA COMA KEYWORDS DOS_PUNTOS CORCHETE_A campos CORCHETE_C COMA HEADER DOS_PUNTOS LLAVE_A TITLE DOS_PUNTOS CADENA LLAVE_C COMA FOOTER DOS_PUNTOS LLAVE_A CADENA DOS_PUNTOS CADENA LLAVE_C COMA BACKGROUND_COLOR DOS_PUNTOS HEXADECIMAL COMA FONT_FAMILY DOS_PUNTOS CADENA COMA FONT_SIZE DOS_PUNTOS CADENA lista_instrucciones LLAVE_C 
            {
              Object RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    accionList= (List<Accion>) ins;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-43)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // campos ::= CADENA lista_campos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("campos",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lista_campos ::= COMA CADENA lista_campos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_campos",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lista_campos ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_campos",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lista_instrucciones ::= instruccion 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 List<Accion> acciones = new ArrayList<>();
                                                                                    if(in instanceof  GraficaBarras){
                                                                                    acciones.add(new Accion((GraficaBarras) in,null,null,null,null,null,null,null));
                                                                                    }
                                                                                    if(in instanceof GraficaLineas){
                                                                                    acciones.add(new Accion(null,(GraficaLineas) in,null,null,null,null,null,null));
                                                                                    }
                                                                                    if(in instanceof GraficaPastel){
                                                                                    acciones.add(new Accion(null,null,(GraficaPastel) in,null,null,null,null,null));
                                                                                    }if(in instanceof GraficaPuntos){
                                                                                    acciones.add(new Accion(null,null,null,(GraficaPuntos) in,null,null,null,null));
                                                                                    }if(in instanceof TarjetaInformacion){
                                                                                    acciones.add(new Accion(null,null,null,null,(TarjetaInformacion) in,null,null,null));
                                                                                    }
                                                                                    if(in instanceof IfCondicional){
                                                                                    acciones.add(new Accion(null,null,null,null,null,(IfCondicional) in,null,null));
                                                                                    }if(in instanceof WhileCiclo){
                                                                                    acciones.add(new Accion(null,null,null,null,null,null,(WhileCiclo) in,null));
                                                                                    }if(in instanceof ForCiclo){
                                                                                    acciones.add(new Accion(null,null,null,null,null,null,null,(ForCiclo) in));
                                                                                    }



                                                                                    RESULT=acciones;
                                                                                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lista_instrucciones ::= lista_instrucciones instruccion 
            {
              Object RESULT =null;
		int listaInstruccionleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int listaInstruccionright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object listaInstruccion = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 List<Accion> acciones = (List<Accion>  )listaInstruccion;
                                                                                        if(in instanceof  GraficaBarras){
                                                                                        acciones.add(new Accion((GraficaBarras) in,null,null,null,null,null,null,null));
                                                                                        }
                                                                                        if(in instanceof GraficaLineas){
                                                                                        acciones.add(new Accion(null,(GraficaLineas) in,null,null,null,null,null,null));
                                                                                        }
                                                                                        if(in instanceof GraficaPastel){
                                                                                        acciones.add(new Accion(null,null,(GraficaPastel) in,null,null,null,null,null));
                                                                                        }if(in instanceof GraficaPuntos){
                                                                                        acciones.add(new Accion(null,null,null,(GraficaPuntos) in,null,null,null,null));
                                                                                        }if(in instanceof TarjetaInformacion){
                                                                                        acciones.add(new Accion(null,null,null,null,(TarjetaInformacion) in,null,null,null));
                                                                                        }
                                                                                        if(in instanceof IfCondicional){
                                                                                        acciones.add(new Accion(null,null,null,null,null,(IfCondicional) in,null,null));
                                                                                        }
                                                                                        if(in instanceof WhileCiclo){
                                                                                        acciones.add(new Accion(null,null,null,null,null,null,(WhileCiclo) in,null));
                                                                                        }if(in instanceof ForCiclo){
                                                                                        acciones.add(new Accion(null,null,null,null,null,null,null,(ForCiclo) in));
                                                                                        }

                                                                                        RESULT=acciones;
                                                                                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= asignacion_operacion_id 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= condicion_if 
            {
              Object RESULT =null;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object condicion = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=condicion; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= bucle_while 
            {
              Object RESULT =null;
		int bucleleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bucleright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object bucle = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=bucle; System.out.println("\n\n\nWhile"+bucle.toString());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= bucle_do_while 
            {
              Object RESULT =null;
		int bucleleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bucleright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object bucle = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=bucle; System.out.println("\n\n\nWhile"+bucle.toString());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= bucle_for 
            {
              Object RESULT =null;
		int bucleleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bucleright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object bucle = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=bucle;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= LLAVE_A DATA DOS_PUNTOS CORCHETE_A LLAVE_A grafica_barras 
            {
              Object RESULT =null;
		int graficaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int graficaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object grafica = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=grafica; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= LLAVE_A DATA DOS_PUNTOS CORCHETE_A LLAVE_A grafia_pastel 
            {
              Object RESULT =null;
		int graficaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int graficaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object grafica = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=grafica; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruccion ::= LLAVE_A DATA DOS_PUNTOS CORCHETE_A LLAVE_A grafica_puntos 
            {
              Object RESULT =null;
		int graficaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int graficaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object grafica = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=grafica; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruccion ::= LLAVE_A DATA DOS_PUNTOS CORCHETE_A LLAVE_A grafica_lineas 
            {
              Object RESULT =null;
		int graficaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int graficaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object grafica = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=grafica; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruccion ::= LLAVE_A DATA DOS_PUNTOS LLAVE_A tarjeta_informacion 
            {
              Object RESULT =null;
		int graficaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int graficaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object grafica = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=grafica; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // grafica_barras ::= grafica_barra_simple 
            {
              Object RESULT =null;
		int graficaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int graficaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object grafica = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 System.out.println("GRAFICA DE BARRAS SIMPLE"+ grafica.toString());       RESULT=grafica; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafica_barras",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // grafica_barras ::= grafica_barras_extendida 
            {
              Object RESULT =null;
		int graficaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int graficaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object grafica = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 System.out.println("GRAFICA DE BARRAS EXTENDIDA"+grafica.toString());  RESULT=grafica; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafica_barras",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$0 ::= 
            {
              Object RESULT =null;
		int catleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int catright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object cat = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
datosGraficaBarras.add(new DatosGraficaBarras(cat.toString(),  val.toString(), null )); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$0",58, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // grafica_barra_simple ::= CATEGORY DOS_PUNTOS CADENA COMA VALUE DOS_PUNTOS CONSTANTE LLAVE_C NT$0 mas_category_simple CORCHETE_C LLAVE_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int catleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).left;
		int catright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).right;
		Object cat = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		 RESULT = new GraficaBarras(true,new ArrayList<>(datosGraficaBarras),null,null,null,null,null,null); datosGraficaBarras.clear(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafica_barra_simple",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$1 ::= 
            {
              Object RESULT =null;
		int catleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int catright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object cat = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
datosGraficaBarras.add(new DatosGraficaBarras(cat.toString(), val.toString(), null )); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$1",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // mas_category_simple ::= COMA LLAVE_A CATEGORY DOS_PUNTOS CADENA COMA VALUE DOS_PUNTOS CONSTANTE LLAVE_C NT$1 mas_category_simple 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int catleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int catright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Object cat = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mas_category_simple",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // mas_category_simple ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mas_category_simple",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$2 ::= 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
 datosGraficaBarras.add(new DatosGraficaBarras(cad.toString(),val.toString(),color.toString()));  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$2",60, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // grafica_barras_extendida ::= CATEGORY DOS_PUNTOS CADENA COMA VALUE DOS_PUNTOS CONSTANTE COMA COLOR DOS_PUNTOS HEXADECIMAL LLAVE_C NT$2 mas_category_extendida CORCHETE_C COMA CHART DOS_PUNTOS LLAVE_A TITLE DOS_PUNTOS CADENA COMA X_AXIS_LABEL DOS_PUNTOS CADENA COMA Y_AXIS_LABEL DOS_PUNTOS CADENA LLAVE_C LLAVE_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-19)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-29)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-29)).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-29)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-25)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-25)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-25)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-21)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-21)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-21)).value;
		int titleleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).left;
		int titleright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).right;
		Object title = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).value;
		int xlabelleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int xlabelright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object xlabel = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int ylabelleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ylabelright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object ylabel = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		 RESULT=new GraficaBarras(false, new ArrayList<>(datosGraficaBarras), title.toString(), xlabel.toString(), ylabel.toString(),null,null,null); datosGraficaBarras.clear(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafica_barras_extendida",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-31)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$3 ::= 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
  datosGraficaBarras.add(new DatosGraficaBarras(cad.toString(),val.toString(),color.toString()));  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$3",61, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // mas_category_extendida ::= COMA LLAVE_A CATEGORY DOS_PUNTOS CADENA COMA VALUE DOS_PUNTOS CONSTANTE COMA COLOR DOS_PUNTOS HEXADECIMAL LLAVE_C NT$3 mas_category_extendida 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mas_category_extendida",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-15)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // mas_category_extendida ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mas_category_extendida",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // grafia_pastel ::= grafica_pastel_simple 
            {
              Object RESULT =null;
		int graficaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int graficaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object grafica = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		System.out.println("Grafica pastel simple"+ grafica.toString());  RESULT=grafica; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafia_pastel",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // grafia_pastel ::= grafica_pastel_extendido 
            {
              Object RESULT =null;
		int graficaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int graficaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object grafica = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		System.out.println("Grafica pastel extendida"+grafica.toString());    RESULT=grafica; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafia_pastel",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$4 ::= 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
 datosGraficaBarras.add(new DatosGraficaBarras(cad.toString(),  val.toString(), null )); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$4",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // grafica_pastel_simple ::= LABEL DOS_PUNTOS CADENA COMA VALUE DOS_PUNTOS CONSTANTE LLAVE_C NT$4 mas_label CORCHETE_C LLAVE_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		 RESULT=new GraficaPastel(true, new ArrayList<>(datosGraficaBarras),null,null,null,null,null); datosGraficaBarras.clear(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafica_pastel_simple",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$5 ::= 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
 datosGraficaBarras.add(new DatosGraficaBarras(cad.toString(),val.toString(),null)); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$5",63, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // mas_label ::= COMA LLAVE_A LABEL DOS_PUNTOS CADENA COMA VALUE DOS_PUNTOS CONSTANTE LLAVE_C NT$5 mas_label 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mas_label",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // mas_label ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mas_label",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$6 ::= 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
 datosGraficaBarras.add(new DatosGraficaBarras(cad.toString(),val.toString(),color.toString())); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$6",64, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // grafica_pastel_extendido ::= LABEL DOS_PUNTOS CADENA COMA VALUE DOS_PUNTOS CONSTANTE COMA COLOR DOS_PUNTOS HEXADECIMAL LLAVE_C NT$6 mas_label_extendido CORCHETE_C COMA CHART DOS_PUNTOS LLAVE_A TITLE DOS_PUNTOS CADENA COMA LEGEND_POSITION DOS_PUNTOS CADENA LLAVE_C LLAVE_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-15)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-25)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-25)).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-25)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-21)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-21)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-21)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-17)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-17)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-17)).value;
		int titleleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int titleright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object title = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int legendPositionleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int legendPositionright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object legendPosition = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		 RESULT=new GraficaPastel(false, new ArrayList<>(datosGraficaBarras), title.toString(), legendPosition.toString(), null,null,null); datosGraficaBarras.clear();  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafica_pastel_extendido",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-27)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$7 ::= 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
datosGraficaBarras.add(new DatosGraficaBarras(cad.toString(),val.toString(),color.toString()));
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$7",65, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // mas_label_extendido ::= COMA LLAVE_A LABEL DOS_PUNTOS CADENA COMA VALUE DOS_PUNTOS CONSTANTE COMA COLOR DOS_PUNTOS HEXADECIMAL LLAVE_C NT$7 mas_label_extendido 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mas_label_extendido",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-15)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // mas_label_extendido ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mas_label_extendido",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // grafica_puntos ::= grafica_puntos_simple 
            {
              Object RESULT =null;
		int graficaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int graficaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object grafica = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		System.out.println("Grafica de puntos: "+grafica.toString());  RESULT=grafica; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafica_puntos",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // grafica_puntos ::= grafica_puntos_expandida 
            {
              Object RESULT =null;
		int graficaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int graficaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object grafica = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 System.out.println("GRAFICA DE PUNTOS EXPANDIDO" + grafica.toString());  RESULT=grafica;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafica_puntos",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$8 ::= 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
 coordenadas.add(new DatosGraficaPuntos(Integer.parseInt(x.toString()),Integer.parseInt(y.toString()),null,null)); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$8",66, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // grafica_puntos_simple ::= X DOS_PUNTOS CONSTANTE COMA Y DOS_PUNTOS CONSTANTE LLAVE_C NT$8 mas_coordenadas_simples CORCHETE_C LLAVE_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		 RESULT = new GraficaPuntos(true, new ArrayList<>(coordenadas),null,null,null ,null,null,null );  coordenadas.clear(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafica_puntos_simple",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$9 ::= 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
coordenadas.add(new DatosGraficaPuntos(Integer.parseInt(x.toString()),Integer.parseInt(y.toString()),null,null)); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$9",67, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // mas_coordenadas_simples ::= COMA LLAVE_A X DOS_PUNTOS CONSTANTE COMA Y DOS_PUNTOS CONSTANTE LLAVE_C NT$9 mas_coordenadas_simples 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mas_coordenadas_simples",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // mas_coordenadas_simples ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mas_coordenadas_simples",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$10 ::= 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-13)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-13)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-13)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object size = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
coordenadas.add(new DatosGraficaPuntos(Integer.parseInt(x.toString()),Integer.parseInt(y.toString()),Integer.parseInt(size.toString()), color.toString())); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$10",68, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // grafica_puntos_expandida ::= X DOS_PUNTOS CONSTANTE COMA Y DOS_PUNTOS CONSTANTE COMA SIZE DOS_PUNTOS CONSTANTE COMA COLOR DOS_PUNTOS HEXADECIMAL LLAVE_C NT$10 mas_coordenadas_expandidas CORCHETE_C COMA CHART DOS_PUNTOS LLAVE_A TITLE DOS_PUNTOS CADENA COMA X_AXIS_LABEL DOS_PUNTOS CADENA COMA Y_AXIS_LABEL DOS_PUNTOS CADENA LLAVE_C LLAVE_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-19)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-33)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-33)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-33)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-29)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-29)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-29)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-25)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-25)).right;
		Object size = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-25)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-21)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-21)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-21)).value;
		int titleleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).left;
		int titleright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).right;
		Object title = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).value;
		int xlabelleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int xlabelright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object xlabel = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int ylabelleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ylabelright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object ylabel = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		  RESULT = new GraficaPuntos(false, new ArrayList<>(coordenadas),title.toString(),xlabel.toString(),ylabel.toString() ,null,null,null ); coordenadas.clear(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafica_puntos_expandida",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-35)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$11 ::= 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-13)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-13)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-13)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object size = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
coordenadas.add(new DatosGraficaPuntos(Integer.parseInt(x.toString()),Integer.parseInt(y.toString()),Integer.parseInt(size.toString()), color.toString())); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$11",69, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // mas_coordenadas_expandidas ::= COMA LLAVE_A X DOS_PUNTOS CONSTANTE COMA Y DOS_PUNTOS CONSTANTE COMA SIZE DOS_PUNTOS CONSTANTE COMA COLOR DOS_PUNTOS HEXADECIMAL LLAVE_C NT$11 mas_coordenadas_expandidas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-15)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-15)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-15)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Object size = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mas_coordenadas_expandidas",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-19)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // mas_coordenadas_expandidas ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mas_coordenadas_expandidas",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // grafica_lineas ::= grafica_lineas_simple 
            {
              Object RESULT =null;
		int graficaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int graficaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object grafica = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		System.out.println("GRAFICA DE LINEAS SIMPLES"+ grafica.toString());  RESULT=grafica;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafica_lineas",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // grafica_lineas ::= grafica_lineas_expandida 
            {
              Object RESULT =null;
		int graficaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int graficaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object grafica = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 System.out.println("GRAFICA DE LINEAS EXPANDIDA"+ grafica.toString());   RESULT=grafica;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafica_lineas",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$12 ::= 
            {
              Object RESULT =null;
		int nombreSerieleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-13)).left;
		int nombreSerieright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-13)).right;
		Object nombreSerie = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-13)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
  coordenadas.add(new DatosGraficaPuntos(Integer.parseInt(x.toString()),Integer.parseInt(y.toString()),null,null));   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$12",70, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$13 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int nombreSerieleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-17)).left;
		int nombreSerieright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-17)).right;
		Object nombreSerie = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-17)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
 series.add(new Serie(nombreSerie.toString() , null,new ArrayList<>(coordenadas),null,null)); coordenadas.clear();  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$13",71, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // grafica_lineas_simple ::= NAME DOS_PUNTOS CADENA COMA POINTS DOS_PUNTOS CORCHETE_A LLAVE_A X DOS_PUNTOS CONSTANTE COMA Y DOS_PUNTOS CONSTANTE LLAVE_C NT$12 mas_coordenadas_simples CORCHETE_C LLAVE_C NT$13 series_simples CORCHETE_C COMA CHART DOS_PUNTOS LLAVE_A TITLE DOS_PUNTOS CADENA COMA X_AXIS_LABEL DOS_PUNTOS CADENA COMA Y_AXIS_LABEL DOS_PUNTOS CADENA LLAVE_C LLAVE_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-19)).value;
		int nombreSerieleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-37)).left;
		int nombreSerieright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-37)).right;
		Object nombreSerie = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-37)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-29)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-29)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-29)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-25)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-25)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-25)).value;
		int titleleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).left;
		int titleright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).right;
		Object title = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).value;
		int xlabelleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int xlabelright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object xlabel = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int ylabelleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ylabelright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object ylabel = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		RESULT= new GraficaLineas(true,new ArrayList<>(series), title.toString(), xlabel.toString(),ylabel.toString(),null,null,null     ); series.clear(); coordenadas.clear(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafica_lineas_simple",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-39)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$14 ::= 
            {
              Object RESULT =null;
		int nombreSerieleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-13)).left;
		int nombreSerieright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-13)).right;
		Object nombreSerie = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-13)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
 coordenadas.add(new DatosGraficaPuntos(Integer.parseInt(x.toString()),Integer.parseInt(y.toString()),null,null));  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$14",72, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$15 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int nombreSerieleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-17)).left;
		int nombreSerieright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-17)).right;
		Object nombreSerie = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-17)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
 series.add(new Serie(nombreSerie.toString() , null,new ArrayList<>(coordenadas),null,null)); coordenadas.clear();  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$15",73, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // series_simples ::= COMA LLAVE_A NAME DOS_PUNTOS CADENA COMA POINTS DOS_PUNTOS CORCHETE_A LLAVE_A X DOS_PUNTOS CONSTANTE COMA Y DOS_PUNTOS CONSTANTE LLAVE_C NT$14 mas_coordenadas_simples CORCHETE_C LLAVE_C NT$15 series_simples 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int nombreSerieleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-19)).left;
		int nombreSerieright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-19)).right;
		Object nombreSerie = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-19)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("series_simples",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-23)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // series_simples ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("series_simples",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$16 ::= 
            {
              Object RESULT =null;
		int nombreSerieleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-17)).left;
		int nombreSerieright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-17)).right;
		Object nombreSerie = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-17)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object label = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
 puntosSeries.add(new PuntosSeries(Integer.parseInt(x.toString()),Integer.parseInt(y.toString()),label.toString())); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$16",74, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$17 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)).value;
		int nombreSerieleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-29)).left;
		int nombreSerieright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-29)).right;
		Object nombreSerie = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-29)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-21)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-21)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-21)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-17)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-17)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-17)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-13)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-13)).right;
		Object label = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-13)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int lineStyleleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int lineStyleright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object lineStyle = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
 series.add(new Serie(nombreSerie.toString(), new ArrayList<>(puntosSeries),null,color.toString(),lineStyle.toString()) );   puntosSeries.clear(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$17",75, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // grafica_lineas_expandida ::= NAME DOS_PUNTOS CADENA COMA POINTS DOS_PUNTOS CORCHETE_A LLAVE_A X DOS_PUNTOS CONSTANTE COMA Y DOS_PUNTOS CONSTANTE COMA LABEL DOS_PUNTOS CADENA LLAVE_C NT$16 mas_coordenadas_label CORCHETE_C COMA COLOR DOS_PUNTOS HEXADECIMAL COMA LINE_STYLE DOS_PUNTOS CADENA LLAVE_C NT$17 series_expandidas CORCHETE_C COMA CHART DOS_PUNTOS LLAVE_A TITLE DOS_PUNTOS CADENA COMA X_AXIS_LABEL DOS_PUNTOS CADENA COMA Y_AXIS_LABEL DOS_PUNTOS CADENA LLAVE_C LLAVE_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-19)).value;
		int nombreSerieleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-49)).left;
		int nombreSerieright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-49)).right;
		Object nombreSerie = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-49)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-41)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-41)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-41)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-37)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-37)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-37)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-33)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-33)).right;
		Object label = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-33)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-25)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-25)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-25)).value;
		int lineStyleleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-21)).left;
		int lineStyleright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-21)).right;
		Object lineStyle = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-21)).value;
		int titleleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).left;
		int titleright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).right;
		Object title = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).value;
		int xlabelleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int xlabelright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object xlabel = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int ylabelleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ylabelright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object ylabel = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		 RESULT = new GraficaLineas(false, new ArrayList<>(series), title.toString(),xlabel.toString(),ylabel.toString(),null,null,null );  puntosSeries.clear(); series.clear();  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafica_lineas_expandida",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-51)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$18 ::= 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object label = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
 puntosSeries.add(new PuntosSeries(Integer.parseInt(x.toString()),Integer.parseInt(y.toString()),label.toString())); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$18",76, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // mas_coordenadas_label ::= COMA LLAVE_A X DOS_PUNTOS CONSTANTE COMA Y DOS_PUNTOS CONSTANTE COMA LABEL DOS_PUNTOS CADENA LLAVE_C NT$18 mas_coordenadas_label 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object label = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mas_coordenadas_label",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-15)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // mas_coordenadas_label ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mas_coordenadas_label",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$19 ::= 
            {
              Object RESULT =null;
		int nombreSerieleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-17)).left;
		int nombreSerieright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-17)).right;
		Object nombreSerie = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-17)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object label = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
 puntosSeries.add(new PuntosSeries(Integer.parseInt(x.toString()),Integer.parseInt(y.toString()),label.toString())); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$19",77, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$20 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).value;
		int nombreSerieleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-28)).left;
		int nombreSerieright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-28)).right;
		Object nombreSerie = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-28)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-20)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-20)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-20)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-16)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-16)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-16)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-12)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-12)).right;
		Object label = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-12)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int lineStyleleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int lineStyleright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object lineStyle = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
 series.add(new Serie(nombreSerie.toString(), new ArrayList<>(puntosSeries),null,color.toString(),lineStyle.toString()) );   puntosSeries.clear(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$20",78, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // series_expandidas ::= COMA LLAVE_A NAME DOS_PUNTOS CADENA COMA POINTS DOS_PUNTOS CORCHETE_A LLAVE_A X DOS_PUNTOS CONSTANTE COMA Y DOS_PUNTOS CONSTANTE COMA LABEL DOS_PUNTOS CADENA LLAVE_C NT$19 mas_coordenadas_label CORCHETE_C COMA COLOR DOS_PUNTOS HEXADECIMAL COMA LINE_STYLE DOS_PUNTOS CADENA NT$20 LLAVE_C series_expandidas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int nombreSerieleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-31)).left;
		int nombreSerieright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-31)).right;
		Object nombreSerie = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-31)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-23)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-23)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-23)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-19)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-19)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-19)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-15)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-15)).right;
		Object label = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-15)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int lineStyleleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int lineStyleright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object lineStyle = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("series_expandidas",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-35)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // series_expandidas ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("series_expandidas",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // tarjeta_informacion ::= tarjeta_informacion_simple 
            {
              Object RESULT =null;
		int tarjetaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tarjetaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object tarjeta = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 System.out.println("TARJETA INFORMACION SIMPLE"+tarjeta.toString());                  RESULT=tarjeta;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tarjeta_informacion",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // tarjeta_informacion ::= tarjeta_informacion_extendida 
            {
              Object RESULT =null;
		int tarjetaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tarjetaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object tarjeta = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 System.out.println("TARJETA DE INFORMACION EXPANDIDA" +tarjeta.toString());  RESULT=tarjeta;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tarjeta_informacion",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // tarjeta_informacion_simple ::= VALUE DOS_PUNTOS CONSTANTE COMA LABEL DOS_PUNTOS CADENA COMA DESCRIPTION DOS_PUNTOS CADENA LLAVE_C LLAVE_C 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object label = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int descripcionleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int descripcionright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object descripcion = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		  RESULT=new TarjetaInformacion(value.toString(),label.toString(), descripcion.toString(),null,null,null      ); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tarjeta_informacion_simple",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-12)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // tarjeta_informacion_extendida ::= VALUE DOS_PUNTOS CONSTANTE COMA LABEL DOS_PUNTOS CADENA COMA DESCRIPTION DOS_PUNTOS CADENA COMA ICON DOS_PUNTOS CADENA COMA COLOR DOS_PUNTOS HEXADECIMAL COMA LINK DOS_PUNTOS CADENA LLAVE_C LLAVE_C 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-22)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-22)).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-22)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-18)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-18)).right;
		Object label = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-18)).value;
		int descripcionleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-14)).left;
		int descripcionright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-14)).right;
		Object descripcion = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-14)).value;
		int iconleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).left;
		int iconright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).right;
		Object icon = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int linkleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int linkright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object link = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		  RESULT=new TarjetaInformacion(value.toString(),label.toString(), descripcion.toString(),icon.toString(),color.toString(),link.toString()      ); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tarjeta_informacion_extendida",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-24)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // asignacion_operacion_id ::= asigancion 
            {
              Object RESULT =null;
		System.out.println("Asignacion");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asignacion_operacion_id",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // asignacion_operacion_id ::= IDENTIFICADOR asignacion_compuesta valor PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("Asignacion Compuesta");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asignacion_operacion_id",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // asignacion_operacion_id ::= IDENTIFICADOR MAS MAS PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("incremente o decremento");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asignacion_operacion_id",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // asignacion_operacion_id ::= IDENTIFICADOR MENOS MENOS PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("incremente o decremento");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asignacion_operacion_id",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // asigancion ::= IDENTIFICADOR IGUAL valor PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                                                                if(!existeVariable(id.toString())){
                                                                Variable variable=(Variable) val; tablaSimbolos.add(new TablaSImbolos(variable.getTipoVariable(),id.toString(),(String) variable.getValor() ));
                                                                }else{
                                                                System.out.println("YA EXISTE LA VARIABLE");
                                                                }
                                                            
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asigancion",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // valor ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT= new Variable(TipoVariable.identificador,val.toString());  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // valor ::= CONSTANTE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT= new Variable(TipoVariable.constante,val.toString());  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // valor ::= TRUE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=new Variable(TipoVariable.booleano, val.toString());  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // valor ::= FALSE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=new Variable(TipoVariable.booleano,val.toString());  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // valor ::= CADENA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=new Variable(TipoVariable.cadena,val.toString());  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // operacion ::= valor operador_artimetico valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operacion",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // operacion ::= incremento_decremento valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operacion",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // operacion ::= IDENTIFICADOR asignacion_compuesta valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operacion",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // asignacion_compuesta ::= MAS IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asignacion_compuesta",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // asignacion_compuesta ::= MENOS IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asignacion_compuesta",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // asignacion_compuesta ::= ASTERISCO IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asignacion_compuesta",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // asignacion_compuesta ::= BARRA IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asignacion_compuesta",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // operador_artimetico ::= ASTERISCO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_artimetico",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // operador_artimetico ::= BARRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_artimetico",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // operador_artimetico ::= MENOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_artimetico",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // operador_artimetico ::= MAS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_artimetico",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // condicion_if ::= IF PARENTESIS_A condicion PARENTESIS_C LLAVE_A lista_instrucciones LLAVE_C 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 IfCondicional condicionIF = null;


                 if(cond instanceof Boolean){
                    condicionIF = new IfCondicional((Boolean) cond,null,null,null,new ArrayList<>((List<Accion>)in ),null);
                }else{

                Condicional condicion= (Condicional) cond;
                    condicionIF = new IfCondicional(null,condicion.getVal1(),condicion.getComparador(),condicion.getVal2(),new ArrayList<>((List<Accion>)in ),null);


                }

                RESULT= condicionIF;  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion_if",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // condicion_if ::= IF PARENTESIS_A condicion PARENTESIS_C LLAVE_A lista_instrucciones LLAVE_C ELSE LLAVE_A lista_instrucciones LLAVE_C 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).value;
		int in1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int in1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object in1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int in2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int in2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object in2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 IfCondicional condicionIF = null;


                               if(cond instanceof Boolean){
                                  condicionIF = new IfCondicional((Boolean) cond,null,null,null,new ArrayList<>((List<Accion>)in1 ),new ArrayList<>((List<Accion>)in2 ));
                              }else{

                              Condicional condicion= (Condicional) cond;
                                  condicionIF = new IfCondicional(null,condicion.getVal1(),condicion.getComparador(),condicion.getVal2(),new ArrayList<>((List<Accion>)in1 ),new ArrayList<>((List<Accion>)in2 ));


                              }

                              RESULT= condicionIF;
                   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion_if",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // bucle_for ::= FOR PARENTESIS_A IDENTIFICADOR IGUAL constate_identificador PUNTO_COMA condicional_for PUNTO_COMA incremento_decremento PARENTESIS_C LLAVE_A lista_instrucciones LLAVE_C 
            {
              Object RESULT =null;
		int idIncialleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).left;
		int idIncialright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).right;
		Object idIncial = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).value;
		int valorInicialleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).left;
		int valorInicialright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).right;
		Object valorInicial = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int pasoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int pasoright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object paso = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
            Condicional condicional =(Condicional)cond;
            IncrementoDecremento pasoFor = (IncrementoDecremento) paso;
            RESULT=new ForCiclo(valorInicial.toString(),condicional.getVal2(), pasoFor.getTipoIncremento(),new ArrayList<>((List<Accion>)in )); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bucle_for",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-12)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // bucle_while ::= WHILE PARENTESIS_A condicion PARENTESIS_C LLAVE_A lista_instrucciones LLAVE_C 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 WhileCiclo whileCiclo = null;


                 if(cond instanceof Boolean){
                    whileCiclo = new WhileCiclo((Boolean) cond,null,null,null,new ArrayList<>((List<Accion>)in ));
                }else{

                Condicional condicion= (Condicional) cond;
                    whileCiclo = new WhileCiclo(null,condicion.getVal1(),condicion.getComparador(),condicion.getVal2(),new ArrayList<>((List<Accion>)in ));


                }

                RESULT= whileCiclo;  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bucle_while",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // bucle_do_while ::= DO LLAVE_A lista_instrucciones LLAVE_C WHILE PARENTESIS_A condicion PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		 WhileCiclo whileCiclo = null;


                 if(cond instanceof Boolean){
                    whileCiclo = new WhileCiclo((Boolean) cond,null,null,null,new ArrayList<>((List<Accion>)in ));
                }else{

                Condicional condicion= (Condicional) cond;
                    whileCiclo = new WhileCiclo(null,condicion.getVal1(),condicion.getComparador(),condicion.getVal2(),new ArrayList<>((List<Accion>)in ));


                }

                RESULT= whileCiclo;  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bucle_do_while",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // condicional_for ::= IDENTIFICADOR MENOR_IGUAL constate_identificador 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT= new Condicional(val1.toString(),Comparador.MENOR_IGUAL,val2.toString());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicional_for",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // condicional_for ::= IDENTIFICADOR MAYOR_IGUAL constate_identificador 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT= new Condicional(val1.toString(),Comparador.MAYOR_IGUAL,val2.toString());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicional_for",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // condicional_for ::= IDENTIFICADOR MAYOR_QUE constate_identificador 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT= new Condicional(val1.toString(),Comparador.MAYOR_QUE,val2.toString());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicional_for",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // condicional_for ::= IDENTIFICADOR MENOR_QUE constate_identificador 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT= new Condicional(val1.toString(),Comparador.MENOR_QUE,val2.toString());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicional_for",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // condicion ::= booolean 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // condicion ::= CONSTANTE comparador CONSTANTE 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object comp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=new Condicional(val1.toString(),(Comparador) comp,val2.toString());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // condicion ::= IDENTIFICADOR comparador IDENTIFICADOR 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object comp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=new Condicional(val1.toString(),(Comparador) comp,val2.toString());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // condicion ::= IDENTIFICADOR comparador CONSTANTE 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object comp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=new Condicional(val1.toString(),(Comparador) comp,val2.toString());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // condicion ::= IDENTIFICADOR IGUAL_IGUAL booolean 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=new Condicional(val1.toString(),Comparador.IGUAL_IGUAL,val2.toString());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // condicion ::= IDENTIFICADOR DIFERENTE booolean 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=new Condicional(val1.toString(),Comparador.DIFERENTE,val2.toString());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // condicion ::= IDENTIFICADOR IGUAL_IGUAL CADENA 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=new Condicional(val1.toString(),Comparador.IGUAL_IGUAL,val2.toString());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // booolean ::= TRUE 
            {
              Object RESULT =null;
		RESULT=true;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("booolean",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // booolean ::= FALSE 
            {
              Object RESULT =null;
		RESULT=false;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("booolean",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // comparador ::= IGUAL_IGUAL 
            {
              Object RESULT =null;
		RESULT=Comparador.IGUAL_IGUAL;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("comparador",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // comparador ::= DIFERENTE 
            {
              Object RESULT =null;
		RESULT=Comparador.DIFERENTE;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("comparador",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // comparador ::= MAYOR_QUE 
            {
              Object RESULT =null;
		RESULT=Comparador.MAYOR_QUE;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("comparador",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // comparador ::= MENOR_QUE 
            {
              Object RESULT =null;
		RESULT=Comparador.MENOR_QUE;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("comparador",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // comparador ::= MENOR_IGUAL 
            {
              Object RESULT =null;
		RESULT=Comparador.MENOR_IGUAL;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("comparador",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // comparador ::= MAYOR_IGUAL 
            {
              Object RESULT =null;
		RESULT=Comparador.MAYOR_IGUAL;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("comparador",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // constate_identificador ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=id;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("constate_identificador",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // constate_identificador ::= CONSTANTE 
            {
              Object RESULT =null;
		int consleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int consright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object cons = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=cons;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("constate_identificador",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // incremento_decremento ::= IDENTIFICADOR MAS MAS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		RESULT=new IncrementoDecremento(id.toString(),PasoFor.incremento); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("incremento_decremento",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // incremento_decremento ::= IDENTIFICADOR MENOS MENOS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		RESULT=new IncrementoDecremento(id.toString(),PasoFor.decremento); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("incremento_decremento",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico$do_action_part00000000(
                               CUP$AnalizadorSintactico$act_num,
                               CUP$AnalizadorSintactico$parser,
                               CUP$AnalizadorSintactico$stack,
                               CUP$AnalizadorSintactico$top);
    }
}

}

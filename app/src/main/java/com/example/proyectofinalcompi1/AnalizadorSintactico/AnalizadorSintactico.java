
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.example.proyectofinalcompi1.AnalizadorSintactico;

import java.util.ArrayList;
import java.util.List;
import com.example.proyectofinalcompi1.AnalizadorLexico.*;
import com.example.proyectofinalcompi1.Model.*;
import com.example.proyectofinalcompi1.Model.TablaSImbolos;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\176\000\002\002\004\000\002\002\056\000\002\003" +
    "\004\000\002\004\005\000\002\004\002\000\002\066\003" +
    "\000\002\066\004\000\002\067\003\000\002\067\003\000" +
    "\002\067\003\000\002\067\003\000\002\067\003\000\002" +
    "\067\006\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\004\000\002\006\003" +
    "\000\002\006\003\000\002\070\002\000\002\007\016\000" +
    "\002\071\002\000\002\010\016\000\002\010\002\000\002" +
    "\072\002\000\002\011\042\000\002\073\002\000\002\012" +
    "\022\000\002\012\002\000\002\013\003\000\002\013\003" +
    "\000\002\074\002\000\002\014\016\000\002\075\002\000" +
    "\002\016\016\000\002\016\002\000\002\076\002\000\002" +
    "\015\036\000\002\077\002\000\002\017\022\000\002\017" +
    "\002\000\002\020\003\000\002\020\003\000\002\100\002" +
    "\000\002\021\016\000\002\101\002\000\002\023\016\000" +
    "\002\023\002\000\002\102\002\000\002\022\046\000\002" +
    "\103\002\000\002\024\026\000\002\024\002\000\002\031" +
    "\003\000\002\031\003\000\002\104\002\000\002\105\002" +
    "\000\002\025\052\000\002\106\002\000\002\107\002\000" +
    "\002\027\032\000\002\027\002\000\002\110\002\000\002" +
    "\111\002\000\002\026\066\000\002\112\002\000\002\032" +
    "\022\000\002\032\002\000\002\113\002\000\002\114\002" +
    "\000\002\030\046\000\002\030\002\000\002\035\003\000" +
    "\002\035\003\000\002\033\017\000\002\034\033\000\002" +
    "\065\003\000\002\065\006\000\002\065\004\000\002\036" +
    "\006\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\040\005\000" +
    "\002\040\004\000\002\040\005\000\002\063\004\000\002" +
    "\063\004\000\002\063\004\000\002\063\004\000\002\062" +
    "\003\000\002\062\003\000\002\062\003\000\002\062\003" +
    "\000\002\060\003\000\002\060\003\000\002\060\003\000" +
    "\002\060\003\000\002\041\011\000\002\041\015\000\002" +
    "\045\017\000\002\051\011\000\002\052\013\000\002\046" +
    "\005\000\002\046\005\000\002\042\003\000\002\042\005" +
    "\000\002\042\005\000\002\042\005\000\002\042\005\000" +
    "\002\042\005\000\002\043\003\000\002\043\003\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\044\003\000\002\044\003\000\002\047\003" +
    "\000\002\047\003\000\002\050\005\000\002\050\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0227\000\004\052\005\001\002\000\004\002\u0229\001" +
    "\002\000\004\004\006\001\002\000\004\047\007\001\002" +
    "\000\004\073\010\001\002\000\004\045\011\001\002\000" +
    "\004\005\012\001\002\000\004\047\013\001\002\000\004" +
    "\073\014\001\002\000\004\045\015\001\002\000\004\006" +
    "\016\001\002\000\004\047\017\001\002\000\004\054\020" +
    "\001\002\000\004\073\022\001\002\000\004\055\027\001" +
    "\002\000\006\045\023\055\ufffd\001\002\000\004\073\025" +
    "\001\002\000\004\055\uffff\001\002\000\006\045\023\055" +
    "\ufffd\001\002\000\004\055\ufffe\001\002\000\004\045\030" +
    "\001\002\000\004\007\031\001\002\000\004\047\032\001" +
    "\002\000\004\052\033\001\002\000\004\004\034\001\002" +
    "\000\004\047\035\001\002\000\004\073\036\001\002\000" +
    "\004\053\037\001\002\000\004\045\040\001\002\000\004" +
    "\010\041\001\002\000\004\047\042\001\002\000\004\052" +
    "\043\001\002\000\004\073\044\001\002\000\004\047\045" +
    "\001\002\000\004\073\046\001\002\000\004\053\047\001" +
    "\002\000\004\045\050\001\002\000\004\011\051\001\002" +
    "\000\004\047\052\001\002\000\004\071\053\001\002\000" +
    "\004\045\054\001\002\000\004\012\055\001\002\000\004" +
    "\047\056\001\002\000\004\073\057\001\002\000\004\045" +
    "\060\001\002\000\004\013\061\001\002\000\004\047\062" +
    "\001\002\000\004\073\063\001\002\000\016\037\075\041" +
    "\066\042\064\043\100\052\074\070\101\001\002\000\004" +
    "\050\u0223\001\002\000\020\037\ufff8\041\ufff8\042\ufff8\043" +
    "\ufff8\052\ufff8\053\ufff8\070\ufff8\001\002\000\004\050\u020d" +
    "\001\002\000\020\037\ufff6\041\ufff6\042\ufff6\043\ufff6\052" +
    "\ufff6\053\ufff6\070\ufff6\001\002\000\020\037\ufff7\041\ufff7" +
    "\042\ufff7\043\ufff7\052\ufff7\053\ufff7\070\ufff7\001\002\000" +
    "\020\037\uffb4\041\uffb4\042\uffb4\043\uffb4\052\uffb4\053\uffb4" +
    "\070\uffb4\001\002\000\020\037\ufff9\041\ufff9\042\ufff9\043" +
    "\ufff9\052\ufff9\053\ufff9\070\ufff9\001\002\000\020\037\ufffc" +
    "\041\ufffc\042\ufffc\043\ufffc\052\ufffc\053\ufffc\070\ufffc\001" +
    "\002\000\004\014\175\001\002\000\004\050\163\001\002" +
    "\000\020\037\ufffa\041\ufffa\042\ufffa\043\ufffa\052\ufffa\053" +
    "\ufffa\070\ufffa\001\002\000\004\046\162\001\002\000\004" +
    "\052\132\001\002\000\014\044\105\056\110\062\107\066" +
    "\106\067\111\001\002\000\020\037\075\041\066\042\064" +
    "\043\100\052\074\053\103\070\101\001\002\000\004\002" +
    "\000\001\002\000\020\037\ufffb\041\ufffb\042\ufffb\043\ufffb" +
    "\052\ufffb\053\ufffb\070\ufffb\001\002\000\004\062\131\001" +
    "\002\000\006\062\130\066\127\001\002\000\014\070\114" +
    "\073\120\074\113\075\117\076\116\001\002\000\004\062" +
    "\124\001\002\000\006\062\122\067\123\001\002\000\014" +
    "\070\114\073\120\074\113\075\117\076\116\001\002\000" +
    "\004\046\uffae\001\002\000\004\046\uffb0\001\002\000\004" +
    "\046\121\001\002\000\004\046\uffaf\001\002\000\004\046" +
    "\uffad\001\002\000\004\046\uffac\001\002\000\020\037\uffb3" +
    "\041\uffb3\042\uffb3\043\uffb3\052\uffb3\053\uffb3\070\uffb3\001" +
    "\002\000\014\070\uffa7\073\uffa7\074\uffa7\075\uffa7\076\uffa7" +
    "\001\002\000\006\046\uff84\051\uff84\001\002\000\014\070" +
    "\uffa5\073\uffa5\074\uffa5\075\uffa5\076\uffa5\001\002\000\004" +
    "\046\126\001\002\000\020\037\uffb1\041\uffb1\042\uffb1\043" +
    "\uffb1\052\uffb1\053\uffb1\070\uffb1\001\002\000\006\046\uff85" +
    "\051\uff85\001\002\000\014\070\uffa8\073\uffa8\074\uffa8\075" +
    "\uffa8\076\uffa8\001\002\000\014\070\uffa6\073\uffa6\074\uffa6" +
    "\075\uffa6\076\uffa6\001\002\000\016\037\075\041\066\042" +
    "\064\043\100\052\074\070\101\001\002\000\020\037\075" +
    "\041\066\042\064\043\100\052\074\053\134\070\101\001" +
    "\002\000\004\042\135\001\002\000\004\050\136\001\002" +
    "\000\010\070\141\074\140\075\142\001\002\000\004\051" +
    "\uff95\001\002\000\004\051\uff8f\001\002\000\016\057\152" +
    "\060\153\061\151\063\150\064\147\065\146\001\002\000" +
    "\004\051\uff8e\001\002\000\004\051\144\001\002\000\004" +
    "\046\145\001\002\000\020\037\uff98\041\uff98\042\uff98\043" +
    "\uff98\052\uff98\053\uff98\070\uff98\001\002\000\006\070\uff8b" +
    "\076\uff8b\001\002\000\006\070\uff8a\076\uff8a\001\002\000" +
    "\014\070\uff8d\073\161\074\140\075\142\076\uff8d\001\002" +
    "\000\012\070\uff8c\074\140\075\142\076\uff8c\001\002\000" +
    "\006\070\uff89\076\uff89\001\002\000\006\070\uff88\076\uff88" +
    "\001\002\000\006\070\155\076\156\001\002\000\004\051" +
    "\uff94\001\002\000\004\051\uff93\001\002\000\004\051\uff91" +
    "\001\002\000\004\051\uff92\001\002\000\004\051\uff90\001" +
    "\002\000\020\037\uffb2\041\uffb2\042\uffb2\043\uffb2\052\uffb2" +
    "\053\uffb2\070\uffb2\001\002\000\010\070\141\074\140\075" +
    "\142\001\002\000\004\051\165\001\002\000\004\052\166" +
    "\001\002\000\016\037\075\041\066\042\064\043\100\052" +
    "\074\070\101\001\002\000\020\037\075\041\066\042\064" +
    "\043\100\052\074\053\170\070\101\001\002\000\022\037" +
    "\uff9c\040\171\041\uff9c\042\uff9c\043\uff9c\052\uff9c\053\uff9c" +
    "\070\uff9c\001\002\000\004\052\172\001\002\000\016\037" +
    "\075\041\066\042\064\043\100\052\074\070\101\001\002" +
    "\000\020\037\075\041\066\042\064\043\100\052\074\053" +
    "\174\070\101\001\002\000\020\037\uff9b\041\uff9b\042\uff9b" +
    "\043\uff9b\052\uff9b\053\uff9b\070\uff9b\001\002\000\004\047" +
    "\176\001\002\000\006\052\200\054\201\001\002\000\020" +
    "\037\ufff5\041\ufff5\042\ufff5\043\ufff5\052\ufff5\053\ufff5\070" +
    "\ufff5\001\002\000\004\016\u01f2\001\002\000\004\052\202" +
    "\001\002\000\012\015\207\024\204\027\222\034\213\001" +
    "\002\000\020\037\ufff4\041\ufff4\042\ufff4\043\ufff4\052\ufff4" +
    "\053\ufff4\070\ufff4\001\002\000\004\047\u01b3\001\002\000" +
    "\020\037\ufff2\041\ufff2\042\ufff2\043\ufff2\052\ufff2\053\ufff2" +
    "\070\ufff2\001\002\000\020\037\uffee\041\uffee\042\uffee\043" +
    "\uffee\052\uffee\053\uffee\070\uffee\001\002\000\004\047\u0173" +
    "\001\002\000\020\037\uffcb\041\uffcb\042\uffcb\043\uffcb\052" +
    "\uffcb\053\uffcb\070\uffcb\001\002\000\020\037\uffd6\041\uffd6" +
    "\042\uffd6\043\uffd6\052\uffd6\053\uffd6\070\uffd6\001\002\000" +
    "\020\037\uffef\041\uffef\042\uffef\043\uffef\052\uffef\053\uffef" +
    "\070\uffef\001\002\000\004\047\u0137\001\002\000\020\037" +
    "\ufff1\041\ufff1\042\ufff1\043\ufff1\052\ufff1\053\ufff1\070\ufff1" +
    "\001\002\000\020\037\uffe3\041\uffe3\042\uffe3\043\uffe3\052" +
    "\uffe3\053\uffe3\070\uffe3\001\002\000\020\037\uffe2\041\uffe2" +
    "\042\uffe2\043\uffe2\052\uffe2\053\uffe2\070\uffe2\001\002\000" +
    "\020\037\uffd7\041\uffd7\042\uffd7\043\uffd7\052\uffd7\053\uffd7" +
    "\070\uffd7\001\002\000\020\037\ufff3\041\ufff3\042\ufff3\043" +
    "\ufff3\052\ufff3\053\ufff3\070\ufff3\001\002\000\020\037\uffca" +
    "\041\uffca\042\uffca\043\uffca\052\uffca\053\uffca\070\uffca\001" +
    "\002\000\004\047\223\001\002\000\004\073\224\001\002" +
    "\000\004\045\225\001\002\000\004\030\226\001\002\000" +
    "\004\047\227\001\002\000\004\054\230\001\002\000\004" +
    "\052\231\001\002\000\004\024\232\001\002\000\004\047" +
    "\233\001\002\000\004\076\234\001\002\000\004\045\235" +
    "\001\002\000\004\025\236\001\002\000\004\047\237\001" +
    "\002\000\004\076\240\001\002\000\006\045\241\053\242" +
    "\001\002\000\004\034\337\001\002\000\006\045\uffc9\055" +
    "\uffc9\001\002\000\006\045\244\055\uffd1\001\002\000\004" +
    "\052\324\001\002\000\004\055\246\001\002\000\004\053" +
    "\247\001\002\000\006\045\uffc8\055\uffc8\001\002\000\006" +
    "\045\251\055\uffc3\001\002\000\004\052\275\001\002\000" +
    "\004\055\253\001\002\000\004\045\254\001\002\000\004" +
    "\020\255\001\002\000\004\047\256\001\002\000\004\052" +
    "\257\001\002\000\004\004\260\001\002\000\004\047\261" +
    "\001\002\000\004\073\262\001\002\000\004\045\263\001" +
    "\002\000\004\021\264\001\002\000\004\047\265\001\002" +
    "\000\004\073\266\001\002\000\004\045\267\001\002\000" +
    "\004\022\270\001\002\000\004\047\271\001\002\000\004" +
    "\073\272\001\002\000\004\053\273\001\002\000\004\053" +
    "\274\001\002\000\020\037\uffc7\041\uffc7\042\uffc7\043\uffc7" +
    "\052\uffc7\053\uffc7\070\uffc7\001\002\000\004\027\276\001" +
    "\002\000\004\047\277\001\002\000\004\073\300\001\002" +
    "\000\004\045\301\001\002\000\004\030\302\001\002\000" +
    "\004\047\303\001\002\000\004\054\304\001\002\000\004" +
    "\052\305\001\002\000\004\024\306\001\002\000\004\047" +
    "\307\001\002\000\004\076\310\001\002\000\004\045\311" +
    "\001\002\000\004\025\312\001\002\000\004\047\313\001" +
    "\002\000\004\076\314\001\002\000\004\053\315\001\002" +
    "\000\006\045\uffc6\055\uffc6\001\002\000\006\045\244\055" +
    "\uffd1\001\002\000\004\055\320\001\002\000\004\053\321" +
    "\001\002\000\006\045\uffc5\055\uffc5\001\002\000\006\045" +
    "\251\055\uffc3\001\002\000\004\055\uffc4\001\002\000\004" +
    "\024\325\001\002\000\004\047\326\001\002\000\004\076" +
    "\327\001\002\000\004\045\330\001\002\000\004\025\331" +
    "\001\002\000\004\047\332\001\002\000\004\076\333\001" +
    "\002\000\004\053\334\001\002\000\006\045\uffd3\055\uffd3" +
    "\001\002\000\006\045\244\055\uffd1\001\002\000\004\055" +
    "\uffd2\001\002\000\004\047\340\001\002\000\004\073\341" +
    "\001\002\000\004\053\342\001\002\000\006\045\uffc2\055" +
    "\uffc2\001\002\000\006\045\344\055\uffbd\001\002\000\004" +
    "\052\u0128\001\002\000\004\055\346\001\002\000\004\045" +
    "\347\001\002\000\004\017\350\001\002\000\004\047\351" +
    "\001\002\000\004\071\352\001\002\000\004\045\353\001" +
    "\002\000\004\031\354\001\002\000\004\047\355\001\002" +
    "\000\004\073\356\001\002\000\004\053\357\001\002\000" +
    "\006\045\uffc1\055\uffc1\001\002\000\006\045\362\055\uffb9" +
    "\001\002\000\004\055\u0116\001\002\000\004\052\363\001" +
    "\002\000\004\027\364\001\002\000\004\047\365\001\002" +
    "\000\004\073\366\001\002\000\004\045\367\001\002\000" +
    "\004\030\370\001\002\000\004\047\371\001\002\000\004" +
    "\054\372\001\002\000\004\052\373\001\002\000\004\024" +
    "\374\001\002\000\004\047\375\001\002\000\004\076\376" +
    "\001\002\000\004\045\377\001\002\000\004\025\u0100\001" +
    "\002\000\004\047\u0101\001\002\000\004\076\u0102\001\002" +
    "\000\004\045\u0103\001\002\000\004\034\u0104\001\002\000" +
    "\004\047\u0105\001\002\000\004\073\u0106\001\002\000\004" +
    "\053\u0107\001\002\000\006\045\uffbc\055\uffbc\001\002\000" +
    "\006\045\344\055\uffbd\001\002\000\004\055\u010a\001\002" +
    "\000\004\045\u010b\001\002\000\004\017\u010c\001\002\000" +
    "\004\047\u010d\001\002\000\004\071\u010e\001\002\000\004" +
    "\045\u010f\001\002\000\004\031\u0110\001\002\000\004\047" +
    "\u0111\001\002\000\004\073\u0112\001\002\000\004\053\uffbb" +
    "\001\002\000\004\053\u0114\001\002\000\006\045\362\055" +
    "\uffb9\001\002\000\004\055\uffba\001\002\000\004\045\u0117" +
    "\001\002\000\004\020\u0118\001\002\000\004\047\u0119\001" +
    "\002\000\004\052\u011a\001\002\000\004\004\u011b\001\002" +
    "\000\004\047\u011c\001\002\000\004\073\u011d\001\002\000" +
    "\004\045\u011e\001\002\000\004\021\u011f\001\002\000\004" +
    "\047\u0120\001\002\000\004\073\u0121\001\002\000\004\045" +
    "\u0122\001\002\000\004\022\u0123\001\002\000\004\047\u0124" +
    "\001\002\000\004\073\u0125\001\002\000\004\053\u0126\001" +
    "\002\000\004\053\u0127\001\002\000\020\037\uffc0\041\uffc0" +
    "\042\uffc0\043\uffc0\052\uffc0\053\uffc0\070\uffc0\001\002\000" +
    "\004\024\u0129\001\002\000\004\047\u012a\001\002\000\004" +
    "\076\u012b\001\002\000\004\045\u012c\001\002\000\004\025" +
    "\u012d\001\002\000\004\047\u012e\001\002\000\004\076\u012f" +
    "\001\002\000\004\045\u0130\001\002\000\004\034\u0131\001" +
    "\002\000\004\047\u0132\001\002\000\004\073\u0133\001\002" +
    "\000\004\053\u0134\001\002\000\006\045\uffbf\055\uffbf\001" +
    "\002\000\006\045\344\055\uffbd\001\002\000\004\055\uffbe" +
    "\001\002\000\004\073\u0138\001\002\000\004\045\u0139\001" +
    "\002\000\004\016\u013a\001\002\000\004\047\u013b\001\002" +
    "\000\004\076\u013c\001\002\000\006\045\u013d\053\u013e\001" +
    "\002\000\004\017\u014f\001\002\000\006\045\uffe1\055\uffe1" +
    "\001\002\000\006\045\u0140\055\uffdd\001\002\000\004\052" +
    "\u0144\001\002\000\004\055\u0142\001\002\000\004\053\u0143" +
    "\001\002\000\020\037\uffe0\041\uffe0\042\uffe0\043\uffe0\052" +
    "\uffe0\053\uffe0\070\uffe0\001\002\000\004\034\u0145\001\002" +
    "\000\004\047\u0146\001\002\000\004\073\u0147\001\002\000" +
    "\004\045\u0148\001\002\000\004\016\u0149\001\002\000\004" +
    "\047\u014a\001\002\000\004\076\u014b\001\002\000\004\053" +
    "\u014c\001\002\000\006\045\uffdf\055\uffdf\001\002\000\006" +
    "\045\u0140\055\uffdd\001\002\000\004\055\uffde\001\002\000" +
    "\004\047\u0150\001\002\000\004\071\u0151\001\002\000\004" +
    "\053\u0152\001\002\000\006\045\uffdc\055\uffdc\001\002\000" +
    "\006\045\u0154\055\uffd8\001\002\000\004\052\u0164\001\002" +
    "\000\004\055\u0156\001\002\000\004\045\u0157\001\002\000" +
    "\004\020\u0158\001\002\000\004\047\u0159\001\002\000\004" +
    "\052\u015a\001\002\000\004\004\u015b\001\002\000\004\047" +
    "\u015c\001\002\000\004\073\u015d\001\002\000\004\045\u015e" +
    "\001\002\000\004\023\u015f\001\002\000\004\047\u0160\001" +
    "\002\000\004\073\u0161\001\002\000\004\053\u0162\001\002" +
    "\000\004\053\u0163\001\002\000\020\037\uffdb\041\uffdb\042" +
    "\uffdb\043\uffdb\052\uffdb\053\uffdb\070\uffdb\001\002\000\004" +
    "\034\u0165\001\002\000\004\047\u0166\001\002\000\004\073" +
    "\u0167\001\002\000\004\045\u0168\001\002\000\004\016\u0169" +
    "\001\002\000\004\047\u016a\001\002\000\004\076\u016b\001" +
    "\002\000\004\045\u016c\001\002\000\004\017\u016d\001\002" +
    "\000\004\047\u016e\001\002\000\004\071\u016f\001\002\000" +
    "\004\053\u0170\001\002\000\006\045\uffda\055\uffda\001\002" +
    "\000\006\045\u0154\055\uffd8\001\002\000\004\055\uffd9\001" +
    "\002\000\004\073\u0174\001\002\000\004\045\u0175\001\002" +
    "\000\004\016\u0176\001\002\000\004\047\u0177\001\002\000" +
    "\004\076\u0178\001\002\000\006\045\u0179\053\u017a\001\002" +
    "\000\004\017\u018b\001\002\000\006\045\uffed\055\uffed\001" +
    "\002\000\006\045\u017c\055\uffe9\001\002\000\004\052\u0180" +
    "\001\002\000\004\055\u017e\001\002\000\004\053\u017f\001" +
    "\002\000\020\037\uffec\041\uffec\042\uffec\043\uffec\052\uffec" +
    "\053\uffec\070\uffec\001\002\000\004\015\u0181\001\002\000" +
    "\004\047\u0182\001\002\000\004\073\u0183\001\002\000\004" +
    "\045\u0184\001\002\000\004\016\u0185\001\002\000\004\047" +
    "\u0186\001\002\000\004\076\u0187\001\002\000\004\053\u0188" +
    "\001\002\000\006\045\uffeb\055\uffeb\001\002\000\006\045" +
    "\u017c\055\uffe9\001\002\000\004\055\uffea\001\002\000\004" +
    "\047\u018c\001\002\000\004\071\u018d\001\002\000\004\053" +
    "\u018e\001\002\000\006\045\uffe8\055\uffe8\001\002\000\006" +
    "\045\u0190\055\uffe4\001\002\000\004\052\u01a4\001\002\000" +
    "\004\055\u0192\001\002\000\004\045\u0193\001\002\000\004" +
    "\020\u0194\001\002\000\004\047\u0195\001\002\000\004\052" +
    "\u0196\001\002\000\004\004\u0197\001\002\000\004\047\u0198" +
    "\001\002\000\004\073\u0199\001\002\000\004\045\u019a\001" +
    "\002\000\004\021\u019b\001\002\000\004\047\u019c\001\002" +
    "\000\004\073\u019d\001\002\000\004\045\u019e\001\002\000" +
    "\004\022\u019f\001\002\000\004\047\u01a0\001\002\000\004" +
    "\073\u01a1\001\002\000\004\053\u01a2\001\002\000\004\053" +
    "\u01a3\001\002\000\020\037\uffe7\041\uffe7\042\uffe7\043\uffe7" +
    "\052\uffe7\053\uffe7\070\uffe7\001\002\000\004\015\u01a5\001" +
    "\002\000\004\047\u01a6\001\002\000\004\073\u01a7\001\002" +
    "\000\004\045\u01a8\001\002\000\004\016\u01a9\001\002\000" +
    "\004\047\u01aa\001\002\000\004\076\u01ab\001\002\000\004" +
    "\045\u01ac\001\002\000\004\017\u01ad\001\002\000\004\047" +
    "\u01ae\001\002\000\004\071\u01af\001\002\000\004\053\u01b0" +
    "\001\002\000\006\045\uffe6\055\uffe6\001\002\000\006\045" +
    "\u0190\055\uffe4\001\002\000\004\055\uffe5\001\002\000\004" +
    "\076\u01b4\001\002\000\004\045\u01b5\001\002\000\004\025" +
    "\u01b6\001\002\000\004\047\u01b7\001\002\000\004\076\u01b8" +
    "\001\002\000\006\045\u01b9\053\u01ba\001\002\000\004\026" +
    "\u01bf\001\002\000\006\045\uffd5\055\uffd5\001\002\000\006" +
    "\045\244\055\uffd1\001\002\000\004\055\u01bd\001\002\000" +
    "\004\053\u01be\001\002\000\020\037\uffd4\041\uffd4\042\uffd4" +
    "\043\uffd4\052\uffd4\053\uffd4\070\uffd4\001\002\000\004\047" +
    "\u01c0\001\002\000\004\076\u01c1\001\002\000\004\045\u01c2" +
    "\001\002\000\004\017\u01c3\001\002\000\004\047\u01c4\001" +
    "\002\000\004\071\u01c5\001\002\000\004\053\u01c6\001\002" +
    "\000\006\045\uffd0\055\uffd0\001\002\000\006\045\u01c8\055" +
    "\uffcc\001\002\000\004\052\u01dc\001\002\000\004\055\u01ca" +
    "\001\002\000\004\045\u01cb\001\002\000\004\020\u01cc\001" +
    "\002\000\004\047\u01cd\001\002\000\004\052\u01ce\001\002" +
    "\000\004\004\u01cf\001\002\000\004\047\u01d0\001\002\000" +
    "\004\073\u01d1\001\002\000\004\045\u01d2\001\002\000\004" +
    "\021\u01d3\001\002\000\004\047\u01d4\001\002\000\004\073" +
    "\u01d5\001\002\000\004\045\u01d6\001\002\000\004\022\u01d7" +
    "\001\002\000\004\047\u01d8\001\002\000\004\073\u01d9\001" +
    "\002\000\004\053\u01da\001\002\000\004\053\u01db\001\002" +
    "\000\020\037\uffcf\041\uffcf\042\uffcf\043\uffcf\052\uffcf\053" +
    "\uffcf\070\uffcf\001\002\000\004\024\u01dd\001\002\000\004" +
    "\047\u01de\001\002\000\004\076\u01df\001\002\000\004\045" +
    "\u01e0\001\002\000\004\025\u01e1\001\002\000\004\047\u01e2" +
    "\001\002\000\004\076\u01e3\001\002\000\004\045\u01e4\001" +
    "\002\000\004\026\u01e5\001\002\000\004\047\u01e6\001\002" +
    "\000\004\076\u01e7\001\002\000\004\045\u01e8\001\002\000" +
    "\004\017\u01e9\001\002\000\004\047\u01ea\001\002\000\004" +
    "\071\u01eb\001\002\000\004\053\u01ec\001\002\000\006\045" +
    "\uffce\055\uffce\001\002\000\006\045\u01c8\055\uffcc\001\002" +
    "\000\004\055\uffcd\001\002\000\020\037\uffb7\041\uffb7\042" +
    "\uffb7\043\uffb7\052\uffb7\053\uffb7\070\uffb7\001\002\000\020" +
    "\037\ufff0\041\ufff0\042\ufff0\043\ufff0\052\ufff0\053\ufff0\070" +
    "\ufff0\001\002\000\020\037\uffb8\041\uffb8\042\uffb8\043\uffb8" +
    "\052\uffb8\053\uffb8\070\uffb8\001\002\000\004\047\u01f3\001" +
    "\002\000\004\076\u01f4\001\002\000\004\045\u01f5\001\002" +
    "\000\004\034\u01f6\001\002\000\004\047\u01f7\001\002\000" +
    "\004\073\u01f8\001\002\000\004\045\u01f9\001\002\000\004" +
    "\005\u01fa\001\002\000\004\047\u01fb\001\002\000\004\073" +
    "\u01fc\001\002\000\006\045\u01fd\053\u01fe\001\002\000\004" +
    "\035\u0200\001\002\000\004\053\u01ff\001\002\000\020\037" +
    "\uffb6\041\uffb6\042\uffb6\043\uffb6\052\uffb6\053\uffb6\070\uffb6" +
    "\001\002\000\004\047\u0201\001\002\000\004\073\u0202\001" +
    "\002\000\004\045\u0203\001\002\000\004\017\u0204\001\002" +
    "\000\004\047\u0205\001\002\000\004\071\u0206\001\002\000" +
    "\004\045\u0207\001\002\000\004\036\u0208\001\002\000\004" +
    "\047\u0209\001\002\000\004\073\u020a\001\002\000\004\053" +
    "\u020b\001\002\000\004\053\u020c\001\002\000\020\037\uffb5" +
    "\041\uffb5\042\uffb5\043\uffb5\052\uffb5\053\uffb5\070\uffb5\001" +
    "\002\000\004\070\u020e\001\002\000\004\062\u020f\001\002" +
    "\000\004\076\u0210\001\002\000\004\046\u0211\001\002\000" +
    "\004\070\u0212\001\002\000\006\057\u021d\060\u021e\001\002" +
    "\000\004\046\u0214\001\002\000\004\070\u0215\001\002\000" +
    "\006\066\u021b\067\u021c\001\002\000\004\051\u0217\001\002" +
    "\000\004\052\u0218\001\002\000\016\037\075\041\066\042" +
    "\064\043\100\052\074\070\101\001\002\000\020\037\075" +
    "\041\066\042\064\043\100\052\074\053\u021a\070\101\001" +
    "\002\000\020\037\uff9a\041\uff9a\042\uff9a\043\uff9a\052\uff9a" +
    "\053\uff9a\070\uff9a\001\002\000\004\066\127\001\002\000" +
    "\004\067\123\001\002\000\006\070\u021f\076\u0220\001\002" +
    "\000\006\070\u021f\076\u0220\001\002\000\004\046\uff87\001" +
    "\002\000\004\046\uff86\001\002\000\004\046\uff96\001\002" +
    "\000\004\046\uff97\001\002\000\010\070\141\074\140\075" +
    "\142\001\002\000\004\051\u0225\001\002\000\004\052\u0226" +
    "\001\002\000\016\037\075\041\066\042\064\043\100\052" +
    "\074\070\101\001\002\000\020\037\075\041\066\042\064" +
    "\043\100\052\074\053\u0228\070\101\001\002\000\020\037" +
    "\uff99\041\uff99\042\uff99\043\uff99\052\uff99\053\uff99\070\uff99" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0227\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\020\001\001\000\002\001" +
    "\001\000\004\004\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\036\070\041\071" +
    "\045\066\050\076\051\064\052\067\065\075\066\101\067" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\063\111\001\001\000\022\036\070" +
    "\041\071\045\066\050\076\051\064\052\067\065\075\067" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\037\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\036\070\041" +
    "\071\045\066\050\076\051\064\052\067\065\075\066\132" +
    "\067\072\001\001\000\022\036\070\041\071\045\066\050" +
    "\076\051\064\052\067\065\075\067\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\042\142\043\136\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\044\153" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\043\157\001\001\000\004\043\156\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\042\163" +
    "\043\136\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\036\070\041\071\045\066\050\076\051\064\052\067" +
    "\065\075\066\166\067\072\001\001\000\022\036\070\041" +
    "\071\045\066\050\076\051\064\052\067\065\075\067\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\036" +
    "\070\041\071\045\066\050\076\051\064\052\067\065\075" +
    "\066\172\067\072\001\001\000\022\036\070\041\071\045" +
    "\066\050\076\051\064\052\067\065\075\067\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\176\001" +
    "\001\000\002\001\001\000\010\033\u01f0\034\u01ee\035\u01ef" +
    "\001\001\000\002\001\001\000\032\006\202\007\211\011" +
    "\205\013\217\014\214\015\215\020\204\021\216\022\210" +
    "\025\207\026\220\031\213\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\104\242\001\001\000\004\023\244\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\105\247\001\001\000\004\027\251\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\106\315\001\001\000\004\023\316\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\107\321\001\001" +
    "\000\004\027\322\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\101\334\001\001\000\004\023\335" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\110\342\001\001\000\004" +
    "\032\344\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\111\357" +
    "\001\001\000\004\030\360\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\113\u0107\001\001\000\004" +
    "\032\u0108\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\114\u0112\001\001\000\002\001\001\000\004" +
    "\030\u0114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\112\u0134\001\001\000\004\032\u0135\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\074\u013e\001\001\000\004\016\u0140" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\075\u014c\001\001\000\004\016\u014d\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\076\u0152\001\001\000\004\017\u0154\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\077\u0170\001\001" +
    "\000\004\017\u0171\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\070\u017a\001\001\000\004\010\u017c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\071\u0188\001\001" +
    "\000\004\010\u0189\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\072\u018e" +
    "\001\001\000\004\012\u0190\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\073\u01b0\001\001\000" +
    "\004\012\u01b1\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\100\u01ba\001\001\000\004\023\u01bb\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\102\u01c6\001\001\000\004\024\u01c8\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\103\u01ec\001\001\000\004\024\u01ed\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\046\u0212\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\050\u0215\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\036\070\041\071\045\066\050\076\051\064\052" +
    "\067\065\075\066\u0218\067\072\001\001\000\022\036\070" +
    "\041\071\045\066\050\076\051\064\052\067\065\075\067" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\047\u0221\001\001\000\004\047\u0220\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\042\u0223\043\136\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\036\070\041\071" +
    "\045\066\050\076\051\064\052\067\065\075\066\u0226\067" +
    "\072\001\001\000\022\036\070\041\071\045\066\050\076" +
    "\051\064\052\067\065\075\067\103\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // Connect this parser to a scanner!
  public AnalizadorSintactico(analizadorLexico lex) {
	    super(lex);
	  }





String Errores;

public void syntax_error(Symbol cur_token) {
    StringBuilder error = new StringBuilder();
    error.append("ERROR SINTACTICO EN : ").append(symbl_name_from_id(cur_token.sym)).append("\n");
    error.append("Linea ").append(cur_token.left).append("\n");
    error.append("Columna ").append(cur_token.right).append("\n");
    if (cur_token.value != null) {
            error.append("Lexema: ").append(cur_token.value).append("\n");
        }



Errores=error.toString();
    System.out.println(error.toString());
}


private List<TablaSImbolos> tablaSimbolos= new ArrayList<>();
private List<DatosGraficaBarras> datosGraficaBarras = new ArrayList<>();
private List<DatosGraficaPuntos> coordenadas = new ArrayList<>();
private List<Serie> series = new ArrayList<>();
private List<PuntosSeries> puntosSeries= new ArrayList<>();





public List<TablaSImbolos> getTablaSimbolos(){
return tablaSimbolos;
}

private boolean existeVariable(String variable){
  for(TablaSImbolos tabla: tablaSimbolos){
    if(tabla.getIdentificaor().equals(variable)){
    //setear el valor tambien

      return true;
    }
  }
  return false;
}











/*
public void unrecovered_syntax_error(Symbol cur_token) {
            System.out.println("Error irrecuperable sobrecargado");
        }*/


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action_part00000000(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= LLAVE_A TITLE DOS_PUNTOS CADENA COMA DESCRIPTION DOS_PUNTOS CADENA COMA KEYWORDS DOS_PUNTOS CORCHETE_A campos CORCHETE_C COMA HEADER DOS_PUNTOS LLAVE_A TITLE DOS_PUNTOS CADENA LLAVE_C COMA FOOTER DOS_PUNTOS LLAVE_A CADENA DOS_PUNTOS CADENA LLAVE_C COMA BACKGROUND_COLOR DOS_PUNTOS HEXADECIMAL COMA FONT_FAMILY DOS_PUNTOS CADENA COMA FONT_SIZE DOS_PUNTOS CADENA lista_instrucciones LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("Simon se analizó bien");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-43)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // campos ::= CADENA lista_campos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("campos",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_campos ::= COMA CADENA lista_campos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_campos",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lista_campos ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_campos",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_instrucciones ::= instruccion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_instrucciones ::= lista_instrucciones instruccion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= asignacion_operacion_id 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= condicion_if 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= bucle_while 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= bucle_do_while 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= bucle_for 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= LLAVE_A DATA DOS_PUNTOS grafica 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // grafica ::= CORCHETE_A LLAVE_A grafica_barras 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafica",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // grafica ::= CORCHETE_A LLAVE_A grafia_pastel 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafica",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // grafica ::= CORCHETE_A LLAVE_A grafica_puntos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafica",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // grafica ::= CORCHETE_A LLAVE_A grafica_lineas 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafica",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // grafica ::= LLAVE_A tarjeta_informacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafica",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // grafica_barras ::= grafica_barra_simple 
            {
              Object RESULT =null;
		int graficaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int graficaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object grafica = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 System.out.println("GRAFICA DE BARRAS SIMPLE"+ grafica.toString());     
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafica_barras",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // grafica_barras ::= grafica_barras_extendida 
            {
              Object RESULT =null;
		int graficaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int graficaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object grafica = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 System.out.println("GRAFICA DE BARRAS EXTENDIDA"+grafica.toString());   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafica_barras",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$0 ::= 
            {
              Object RESULT =null;
		int catleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int catright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object cat = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
datosGraficaBarras.add(new DatosGraficaBarras(cat.toString(),  val.toString(), null )); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$0",54, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // grafica_barra_simple ::= CATEGORY DOS_PUNTOS CADENA COMA VALUE DOS_PUNTOS CONSTANTE LLAVE_C NT$0 mas_category_simple CORCHETE_C LLAVE_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int catleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).left;
		int catright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).right;
		Object cat = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		 RESULT = new GraficaBarras(true,new ArrayList<>(datosGraficaBarras),null,null,null,null,null,null); datosGraficaBarras.clear(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafica_barra_simple",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$1 ::= 
            {
              Object RESULT =null;
		int catleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int catright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object cat = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
datosGraficaBarras.add(new DatosGraficaBarras(cat.toString(), val.toString(), null )); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$1",55, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // mas_category_simple ::= COMA LLAVE_A CATEGORY DOS_PUNTOS CADENA COMA VALUE DOS_PUNTOS CONSTANTE LLAVE_C NT$1 mas_category_simple 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int catleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int catright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Object cat = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mas_category_simple",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // mas_category_simple ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mas_category_simple",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$2 ::= 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
 datosGraficaBarras.add(new DatosGraficaBarras(cad.toString(),val.toString(),color.toString()));  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$2",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // grafica_barras_extendida ::= CATEGORY DOS_PUNTOS CADENA COMA VALUE DOS_PUNTOS CONSTANTE COMA COLOR DOS_PUNTOS HEXADECIMAL LLAVE_C NT$2 mas_category_extendida CORCHETE_C COMA CHART DOS_PUNTOS LLAVE_A TITLE DOS_PUNTOS CADENA COMA X_AXIS_LABEL DOS_PUNTOS CADENA COMA Y_AXIS_LABEL DOS_PUNTOS CADENA LLAVE_C LLAVE_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-19)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-29)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-29)).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-29)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-25)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-25)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-25)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-21)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-21)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-21)).value;
		int titleleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).left;
		int titleright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).right;
		Object title = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).value;
		int xlabelleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int xlabelright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object xlabel = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int ylabelleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ylabelright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object ylabel = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		 RESULT=new GraficaBarras(false, new ArrayList<>(datosGraficaBarras), title.toString(), xlabel.toString(), ylabel.toString(),null,null,null); datosGraficaBarras.clear(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafica_barras_extendida",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-31)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$3 ::= 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
  datosGraficaBarras.add(new DatosGraficaBarras(cad.toString(),val.toString(),color.toString()));  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$3",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // mas_category_extendida ::= COMA LLAVE_A CATEGORY DOS_PUNTOS CADENA COMA VALUE DOS_PUNTOS CONSTANTE COMA COLOR DOS_PUNTOS HEXADECIMAL LLAVE_C NT$3 mas_category_extendida 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mas_category_extendida",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-15)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // mas_category_extendida ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mas_category_extendida",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // grafia_pastel ::= grafica_pastel_simple 
            {
              Object RESULT =null;
		int graficaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int graficaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object grafica = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		System.out.println("Grafica pastel simple"+ grafica.toString());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafia_pastel",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // grafia_pastel ::= grafica_pastel_extendido 
            {
              Object RESULT =null;
		int graficaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int graficaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object grafica = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		System.out.println("Grafica pastel extendida"+grafica.toString());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafia_pastel",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$4 ::= 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
 datosGraficaBarras.add(new DatosGraficaBarras(cad.toString(),  val.toString(), null )); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$4",58, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // grafica_pastel_simple ::= LABEL DOS_PUNTOS CADENA COMA VALUE DOS_PUNTOS CONSTANTE LLAVE_C NT$4 mas_label CORCHETE_C LLAVE_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		 RESULT=new GraficaPastel(true, new ArrayList<>(datosGraficaBarras),null,null,null,null,null); datosGraficaBarras.clear(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafica_pastel_simple",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$5 ::= 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
 datosGraficaBarras.add(new DatosGraficaBarras(cad.toString(),val.toString(),null)); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$5",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // mas_label ::= COMA LLAVE_A LABEL DOS_PUNTOS CADENA COMA VALUE DOS_PUNTOS CONSTANTE LLAVE_C NT$5 mas_label 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mas_label",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // mas_label ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mas_label",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$6 ::= 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
 datosGraficaBarras.add(new DatosGraficaBarras(cad.toString(),val.toString(),color.toString())); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$6",60, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // grafica_pastel_extendido ::= LABEL DOS_PUNTOS CADENA COMA VALUE DOS_PUNTOS CONSTANTE COMA COLOR DOS_PUNTOS HEXADECIMAL LLAVE_C NT$6 mas_label_extendido CORCHETE_C COMA CHART DOS_PUNTOS LLAVE_A TITLE DOS_PUNTOS CADENA COMA LEGEND_POSITION DOS_PUNTOS CADENA LLAVE_C LLAVE_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-15)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-25)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-25)).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-25)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-21)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-21)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-21)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-17)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-17)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-17)).value;
		int titleleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int titleright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object title = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int legendPositionleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int legendPositionright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object legendPosition = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		 RESULT=new GraficaPastel(false, new ArrayList<>(datosGraficaBarras), title.toString(), legendPosition.toString(), null,null,null); datosGraficaBarras.clear();  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafica_pastel_extendido",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-27)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$7 ::= 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
datosGraficaBarras.add(new DatosGraficaBarras(cad.toString(),val.toString(),color.toString()));
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$7",61, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // mas_label_extendido ::= COMA LLAVE_A LABEL DOS_PUNTOS CADENA COMA VALUE DOS_PUNTOS CONSTANTE COMA COLOR DOS_PUNTOS HEXADECIMAL LLAVE_C NT$7 mas_label_extendido 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mas_label_extendido",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-15)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // mas_label_extendido ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mas_label_extendido",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // grafica_puntos ::= grafica_puntos_simple 
            {
              Object RESULT =null;
		int graficaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int graficaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object grafica = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		System.out.println("Grafica de puntos: "+grafica.toString()); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafica_puntos",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // grafica_puntos ::= grafica_puntos_expandida 
            {
              Object RESULT =null;
		int graficaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int graficaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object grafica = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 System.out.println("GRAFICA DE PUNTOS EXPANDIDO" + grafica.toString());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafica_puntos",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$8 ::= 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
 coordenadas.add(new DatosGraficaPuntos(Integer.parseInt(x.toString()),Integer.parseInt(y.toString()),null,null)); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$8",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // grafica_puntos_simple ::= X DOS_PUNTOS CONSTANTE COMA Y DOS_PUNTOS CONSTANTE LLAVE_C NT$8 mas_coordenadas_simples CORCHETE_C LLAVE_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		 RESULT = new GraficaPuntos(true, new ArrayList<>(coordenadas),null,null,null ,null,null,null );  coordenadas.clear(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafica_puntos_simple",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$9 ::= 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
coordenadas.add(new DatosGraficaPuntos(Integer.parseInt(x.toString()),Integer.parseInt(y.toString()),null,null)); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$9",63, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // mas_coordenadas_simples ::= COMA LLAVE_A X DOS_PUNTOS CONSTANTE COMA Y DOS_PUNTOS CONSTANTE LLAVE_C NT$9 mas_coordenadas_simples 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mas_coordenadas_simples",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // mas_coordenadas_simples ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mas_coordenadas_simples",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$10 ::= 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-13)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-13)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-13)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object size = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
coordenadas.add(new DatosGraficaPuntos(Integer.parseInt(x.toString()),Integer.parseInt(y.toString()),Integer.parseInt(size.toString()), color.toString())); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$10",64, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // grafica_puntos_expandida ::= X DOS_PUNTOS CONSTANTE COMA Y DOS_PUNTOS CONSTANTE COMA SIZE DOS_PUNTOS CONSTANTE COMA COLOR DOS_PUNTOS HEXADECIMAL LLAVE_C NT$10 mas_coordenadas_expandidas CORCHETE_C COMA CHART DOS_PUNTOS LLAVE_A TITLE DOS_PUNTOS CADENA COMA X_AXIS_LABEL DOS_PUNTOS CADENA COMA Y_AXIS_LABEL DOS_PUNTOS CADENA LLAVE_C LLAVE_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-19)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-33)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-33)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-33)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-29)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-29)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-29)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-25)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-25)).right;
		Object size = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-25)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-21)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-21)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-21)).value;
		int titleleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).left;
		int titleright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).right;
		Object title = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).value;
		int xlabelleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int xlabelright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object xlabel = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int ylabelleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ylabelright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object ylabel = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		  RESULT = new GraficaPuntos(false, new ArrayList<>(coordenadas),title.toString(),xlabel.toString(),ylabel.toString() ,null,null,null ); coordenadas.clear(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafica_puntos_expandida",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-35)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$11 ::= 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-13)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-13)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-13)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object size = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
coordenadas.add(new DatosGraficaPuntos(Integer.parseInt(x.toString()),Integer.parseInt(y.toString()),Integer.parseInt(size.toString()), color.toString())); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$11",65, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // mas_coordenadas_expandidas ::= COMA LLAVE_A X DOS_PUNTOS CONSTANTE COMA Y DOS_PUNTOS CONSTANTE COMA SIZE DOS_PUNTOS CONSTANTE COMA COLOR DOS_PUNTOS HEXADECIMAL LLAVE_C NT$11 mas_coordenadas_expandidas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-15)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-15)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-15)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Object size = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mas_coordenadas_expandidas",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-19)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // mas_coordenadas_expandidas ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mas_coordenadas_expandidas",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // grafica_lineas ::= grafica_lineas_simple 
            {
              Object RESULT =null;
		int graficaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int graficaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object grafica = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		System.out.println("GRAFICA DE LINEAS SIMPLES"+ grafica.toString());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafica_lineas",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // grafica_lineas ::= grafica_lineas_expandida 
            {
              Object RESULT =null;
		int graficaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int graficaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object grafica = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 System.out.println("GRAFICA DE LINEAS EXPANDIDA"+ grafica.toString());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafica_lineas",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$12 ::= 
            {
              Object RESULT =null;
		int nombreSerieleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-13)).left;
		int nombreSerieright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-13)).right;
		Object nombreSerie = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-13)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
  coordenadas.add(new DatosGraficaPuntos(Integer.parseInt(x.toString()),Integer.parseInt(y.toString()),null,null));   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$12",66, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$13 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int nombreSerieleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-17)).left;
		int nombreSerieright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-17)).right;
		Object nombreSerie = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-17)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
 series.add(new Serie(nombreSerie.toString() , null,new ArrayList<>(coordenadas),null,null)); coordenadas.clear();  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$13",67, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // grafica_lineas_simple ::= NAME DOS_PUNTOS CADENA COMA POINTS DOS_PUNTOS CORCHETE_A LLAVE_A X DOS_PUNTOS CONSTANTE COMA Y DOS_PUNTOS CONSTANTE LLAVE_C NT$12 mas_coordenadas_simples CORCHETE_C LLAVE_C NT$13 series_simples CORCHETE_C COMA CHART DOS_PUNTOS LLAVE_A TITLE DOS_PUNTOS CADENA COMA X_AXIS_LABEL DOS_PUNTOS CADENA COMA Y_AXIS_LABEL DOS_PUNTOS CADENA LLAVE_C LLAVE_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-19)).value;
		int nombreSerieleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-37)).left;
		int nombreSerieright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-37)).right;
		Object nombreSerie = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-37)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-29)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-29)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-29)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-25)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-25)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-25)).value;
		int titleleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).left;
		int titleright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).right;
		Object title = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).value;
		int xlabelleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int xlabelright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object xlabel = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int ylabelleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ylabelright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object ylabel = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		RESULT= new GraficaLineas(true,new ArrayList<>(series), title.toString(), xlabel.toString(),ylabel.toString(),null,null,null     ); series.clear(); coordenadas.clear(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafica_lineas_simple",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-39)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$14 ::= 
            {
              Object RESULT =null;
		int nombreSerieleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-13)).left;
		int nombreSerieright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-13)).right;
		Object nombreSerie = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-13)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
 coordenadas.add(new DatosGraficaPuntos(Integer.parseInt(x.toString()),Integer.parseInt(y.toString()),null,null));  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$14",68, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$15 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int nombreSerieleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-17)).left;
		int nombreSerieright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-17)).right;
		Object nombreSerie = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-17)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
 series.add(new Serie(nombreSerie.toString() , null,new ArrayList<>(coordenadas),null,null)); coordenadas.clear();  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$15",69, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // series_simples ::= COMA LLAVE_A NAME DOS_PUNTOS CADENA COMA POINTS DOS_PUNTOS CORCHETE_A LLAVE_A X DOS_PUNTOS CONSTANTE COMA Y DOS_PUNTOS CONSTANTE LLAVE_C NT$14 mas_coordenadas_simples CORCHETE_C LLAVE_C NT$15 series_simples 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int nombreSerieleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-19)).left;
		int nombreSerieright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-19)).right;
		Object nombreSerie = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-19)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("series_simples",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-23)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // series_simples ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("series_simples",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$16 ::= 
            {
              Object RESULT =null;
		int nombreSerieleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-17)).left;
		int nombreSerieright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-17)).right;
		Object nombreSerie = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-17)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object label = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
 puntosSeries.add(new PuntosSeries(Integer.parseInt(x.toString()),Integer.parseInt(y.toString()),label.toString())); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$16",70, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$17 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)).value;
		int nombreSerieleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-29)).left;
		int nombreSerieright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-29)).right;
		Object nombreSerie = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-29)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-21)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-21)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-21)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-17)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-17)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-17)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-13)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-13)).right;
		Object label = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-13)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int lineStyleleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int lineStyleright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object lineStyle = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
 series.add(new Serie(nombreSerie.toString(), new ArrayList<>(puntosSeries),null,color.toString(),lineStyle.toString()) );   puntosSeries.clear(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$17",71, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // grafica_lineas_expandida ::= NAME DOS_PUNTOS CADENA COMA POINTS DOS_PUNTOS CORCHETE_A LLAVE_A X DOS_PUNTOS CONSTANTE COMA Y DOS_PUNTOS CONSTANTE COMA LABEL DOS_PUNTOS CADENA LLAVE_C NT$16 mas_coordenadas_label CORCHETE_C COMA COLOR DOS_PUNTOS HEXADECIMAL COMA LINE_STYLE DOS_PUNTOS CADENA LLAVE_C NT$17 series_expandidas CORCHETE_C COMA CHART DOS_PUNTOS LLAVE_A TITLE DOS_PUNTOS CADENA COMA X_AXIS_LABEL DOS_PUNTOS CADENA COMA Y_AXIS_LABEL DOS_PUNTOS CADENA LLAVE_C LLAVE_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-19)).value;
		int nombreSerieleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-49)).left;
		int nombreSerieright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-49)).right;
		Object nombreSerie = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-49)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-41)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-41)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-41)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-37)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-37)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-37)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-33)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-33)).right;
		Object label = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-33)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-25)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-25)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-25)).value;
		int lineStyleleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-21)).left;
		int lineStyleright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-21)).right;
		Object lineStyle = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-21)).value;
		int titleleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).left;
		int titleright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).right;
		Object title = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).value;
		int xlabelleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int xlabelright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object xlabel = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int ylabelleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ylabelright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object ylabel = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		 RESULT = new GraficaLineas(false, new ArrayList<>(series), title.toString(),xlabel.toString(),ylabel.toString(),null,null,null );  puntosSeries.clear(); series.clear();  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafica_lineas_expandida",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-51)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$18 ::= 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object label = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
 puntosSeries.add(new PuntosSeries(Integer.parseInt(x.toString()),Integer.parseInt(y.toString()),label.toString())); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$18",72, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // mas_coordenadas_label ::= COMA LLAVE_A X DOS_PUNTOS CONSTANTE COMA Y DOS_PUNTOS CONSTANTE COMA LABEL DOS_PUNTOS CADENA LLAVE_C NT$18 mas_coordenadas_label 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object label = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mas_coordenadas_label",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-15)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // mas_coordenadas_label ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mas_coordenadas_label",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$19 ::= 
            {
              Object RESULT =null;
		int nombreSerieleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-17)).left;
		int nombreSerieright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-17)).right;
		Object nombreSerie = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-17)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object label = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
 puntosSeries.add(new PuntosSeries(Integer.parseInt(x.toString()),Integer.parseInt(y.toString()),label.toString())); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$19",73, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$20 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).value;
		int nombreSerieleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-28)).left;
		int nombreSerieright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-28)).right;
		Object nombreSerie = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-28)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-20)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-20)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-20)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-16)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-16)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-16)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-12)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-12)).right;
		Object label = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-12)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int lineStyleleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int lineStyleright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object lineStyle = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
 series.add(new Serie(nombreSerie.toString(), new ArrayList<>(puntosSeries),null,color.toString(),lineStyle.toString()) );   puntosSeries.clear(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$20",74, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // series_expandidas ::= COMA LLAVE_A NAME DOS_PUNTOS CADENA COMA POINTS DOS_PUNTOS CORCHETE_A LLAVE_A X DOS_PUNTOS CONSTANTE COMA Y DOS_PUNTOS CONSTANTE COMA LABEL DOS_PUNTOS CADENA LLAVE_C NT$19 mas_coordenadas_label CORCHETE_C COMA COLOR DOS_PUNTOS HEXADECIMAL COMA LINE_STYLE DOS_PUNTOS CADENA NT$20 LLAVE_C series_expandidas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int nombreSerieleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-31)).left;
		int nombreSerieright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-31)).right;
		Object nombreSerie = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-31)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-23)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-23)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-23)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-19)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-19)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-19)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-15)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-15)).right;
		Object label = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-15)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int lineStyleleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int lineStyleright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object lineStyle = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("series_expandidas",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-35)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // series_expandidas ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("series_expandidas",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // tarjeta_informacion ::= tarjeta_informacion_simple 
            {
              Object RESULT =null;
		int tarjetaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tarjetaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object tarjeta = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 System.out.println("TARJETA INFORMACION SIMPLE"+tarjeta.toString());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tarjeta_informacion",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // tarjeta_informacion ::= tarjeta_informacion_extendida 
            {
              Object RESULT =null;
		int tarjetaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tarjetaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object tarjeta = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 System.out.println("TARJETA DE INFORMACION EXPANDIDA" +tarjeta.toString());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tarjeta_informacion",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // tarjeta_informacion_simple ::= VALUE DOS_PUNTOS CONSTANTE COMA LABEL DOS_PUNTOS CADENA COMA DESCRIPTION DOS_PUNTOS CADENA LLAVE_C LLAVE_C 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object label = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int descripcionleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int descripcionright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object descripcion = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		  RESULT=new TarjetaInformacion(value.toString(),label.toString(), descripcion.toString(),null,null,null      ); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tarjeta_informacion_simple",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-12)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // tarjeta_informacion_extendida ::= VALUE DOS_PUNTOS CONSTANTE COMA LABEL DOS_PUNTOS CADENA COMA DESCRIPTION DOS_PUNTOS CADENA COMA ICON DOS_PUNTOS CADENA COMA COLOR DOS_PUNTOS HEXADECIMAL COMA LINK DOS_PUNTOS CADENA LLAVE_C LLAVE_C 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-22)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-22)).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-22)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-18)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-18)).right;
		Object label = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-18)).value;
		int descripcionleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-14)).left;
		int descripcionright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-14)).right;
		Object descripcion = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-14)).value;
		int iconleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).left;
		int iconright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).right;
		Object icon = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int linkleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int linkright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object link = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		  RESULT=new TarjetaInformacion(value.toString(),label.toString(), descripcion.toString(),icon.toString(),color.toString(),link.toString()      ); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tarjeta_informacion_extendida",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-24)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // asignacion_operacion_id ::= asigancion 
            {
              Object RESULT =null;
		System.out.println("Asignacion");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asignacion_operacion_id",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // asignacion_operacion_id ::= IDENTIFICADOR asignacion_compuesta valor PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("Asignacion Compuesta");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asignacion_operacion_id",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // asignacion_operacion_id ::= incremento_decremento PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("incremente o decremento");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asignacion_operacion_id",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // asigancion ::= IDENTIFICADOR IGUAL valor PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                                                                if(!existeVariable(id.toString())){
                                                                Variable variable=(Variable) val; tablaSimbolos.add(new TablaSImbolos(variable.getTipoVariable(),id.toString(),(String) variable.getValor() ));
                                                                }else{
                                                                System.out.println("YA EXISTE LA VARIABLE");
                                                                }
                                                            
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asigancion",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // valor ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT= new Variable(TipoVariable.identificador,val.toString());  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // valor ::= CONSTANTE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT= new Variable(TipoVariable.constante,val.toString());  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // valor ::= TRUE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=new Variable(TipoVariable.booleano, val.toString());  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // valor ::= FALSE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=new Variable(TipoVariable.booleano,val.toString());  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // valor ::= CADENA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=new Variable(TipoVariable.cadena,val.toString());  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // operacion ::= valor operador_artimetico valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operacion",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // operacion ::= incremento_decremento valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operacion",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // operacion ::= IDENTIFICADOR asignacion_compuesta valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operacion",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // asignacion_compuesta ::= MAS IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asignacion_compuesta",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // asignacion_compuesta ::= MENOS IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asignacion_compuesta",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // asignacion_compuesta ::= ASTERISCO IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asignacion_compuesta",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // asignacion_compuesta ::= BARRA IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asignacion_compuesta",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // operador_artimetico ::= ASTERISCO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_artimetico",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // operador_artimetico ::= BARRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_artimetico",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // operador_artimetico ::= MENOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_artimetico",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // operador_artimetico ::= MAS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_artimetico",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // estructura_control ::= condicion_if 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("estructura_control",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // estructura_control ::= bucle_for 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("estructura_control",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // estructura_control ::= bucle_do_while 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("estructura_control",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // estructura_control ::= bucle_while 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("estructura_control",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // condicion_if ::= IF PARENTESIS_A condicion PARENTESIS_C LLAVE_A lista_instrucciones LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion_if",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // condicion_if ::= IF PARENTESIS_A condicion PARENTESIS_C LLAVE_A lista_instrucciones LLAVE_C ELSE LLAVE_A lista_instrucciones LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion_if",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // bucle_for ::= FOR PARENTESIS_A IDENTIFICADOR IGUAL CONSTANTE PUNTO_COMA condicional_for PUNTO_COMA incremento_decremento PARENTESIS_C LLAVE_A lista_instrucciones LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bucle_for",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-12)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // bucle_while ::= WHILE PARENTESIS_A condicion PARENTESIS_C LLAVE_A lista_instrucciones LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bucle_while",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // bucle_do_while ::= DO LLAVE_A lista_instrucciones LLAVE_C WHILE PARENTESIS_A condicion PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bucle_do_while",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // condicional_for ::= IDENTIFICADOR MENOR_IGUAL constate_identificador 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicional_for",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // condicional_for ::= IDENTIFICADOR MAYOR_IGUAL constate_identificador 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicional_for",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // condicion ::= booolean 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // condicion ::= IDENTIFICADOR comparador IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // condicion ::= IDENTIFICADOR comparador CONSTANTE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // condicion ::= IDENTIFICADOR IGUAL_IGUAL booolean 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // condicion ::= IDENTIFICADOR DIFERENTE booolean 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // condicion ::= IDENTIFICADOR IGUAL_IGUAL CADENA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // booolean ::= TRUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("booolean",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // booolean ::= FALSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("booolean",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // comparador ::= IGUAL_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("comparador",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // comparador ::= DIFERENTE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("comparador",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // comparador ::= MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("comparador",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // comparador ::= MENOR_QUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("comparador",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // comparador ::= MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("comparador",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // comparador ::= MAYOR_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("comparador",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // constate_identificador ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("constate_identificador",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // constate_identificador ::= CONSTANTE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("constate_identificador",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // incremento_decremento ::= IDENTIFICADOR MAS MAS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("incremento_decremento",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // incremento_decremento ::= IDENTIFICADOR MENOS MENOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("incremento_decremento",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico$do_action_part00000000(
                               CUP$AnalizadorSintactico$act_num,
                               CUP$AnalizadorSintactico$parser,
                               CUP$AnalizadorSintactico$stack,
                               CUP$AnalizadorSintactico$top);
    }
}

}

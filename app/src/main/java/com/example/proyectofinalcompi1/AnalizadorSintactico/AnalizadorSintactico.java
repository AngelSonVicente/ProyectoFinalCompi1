
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.example.proyectofinalcompi1.AnalizadorSintactico;

import java.util.ArrayList;
import java.util.List;
import com.example.proyectofinalcompi1.AnalizadorLexico.*;
import com.example.proyectofinalcompi1.Model.*;
import com.example.proyectofinalcompi1.Model.TablaSImbolos;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\152\000\002\002\004\000\002\002\056\000\002\003" +
    "\004\000\002\004\005\000\002\004\002\000\002\066\003" +
    "\000\002\066\004\000\002\067\003\000\002\067\003\000" +
    "\002\067\003\000\002\067\003\000\002\067\003\000\002" +
    "\067\006\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\004\000\002\006\003" +
    "\000\002\006\003\000\002\070\002\000\002\007\016\000" +
    "\002\071\002\000\002\010\016\000\002\010\002\000\002" +
    "\011\041\000\002\012\021\000\002\012\002\000\002\013" +
    "\003\000\002\013\003\000\002\014\015\000\002\016\015" +
    "\000\002\016\002\000\002\015\035\000\002\017\021\000" +
    "\002\017\002\000\002\020\003\000\002\020\003\000\002" +
    "\021\015\000\002\023\015\000\002\023\002\000\002\022" +
    "\045\000\002\024\025\000\002\024\002\000\002\031\003" +
    "\000\002\031\003\000\002\025\050\000\002\027\030\000" +
    "\002\027\002\000\002\026\064\000\002\032\021\000\002" +
    "\032\002\000\002\030\043\000\002\035\003\000\002\035" +
    "\003\000\002\033\017\000\002\034\033\000\002\065\003" +
    "\000\002\065\006\000\002\065\004\000\002\036\006\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\040\005\000\002\040" +
    "\004\000\002\040\005\000\002\063\004\000\002\063\004" +
    "\000\002\063\004\000\002\063\004\000\002\062\003\000" +
    "\002\062\003\000\002\062\003\000\002\062\003\000\002" +
    "\060\003\000\002\060\003\000\002\060\003\000\002\060" +
    "\003\000\002\041\011\000\002\041\015\000\002\045\017" +
    "\000\002\051\011\000\002\052\013\000\002\046\005\000" +
    "\002\046\005\000\002\042\003\000\002\042\005\000\002" +
    "\042\005\000\002\042\005\000\002\042\005\000\002\042" +
    "\005\000\002\043\003\000\002\043\003\000\002\044\003" +
    "\000\002\044\003\000\002\044\003\000\002\044\003\000" +
    "\002\044\003\000\002\044\003\000\002\047\003\000\002" +
    "\047\003\000\002\050\005\000\002\050\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0213\000\004\052\005\001\002\000\004\002\u0215\001" +
    "\002\000\004\004\006\001\002\000\004\047\007\001\002" +
    "\000\004\074\010\001\002\000\004\045\011\001\002\000" +
    "\004\005\012\001\002\000\004\047\013\001\002\000\004" +
    "\074\014\001\002\000\004\045\015\001\002\000\004\006" +
    "\016\001\002\000\004\047\017\001\002\000\004\054\020" +
    "\001\002\000\004\074\022\001\002\000\004\055\027\001" +
    "\002\000\006\045\023\055\ufffd\001\002\000\004\074\025" +
    "\001\002\000\004\055\uffff\001\002\000\006\045\023\055" +
    "\ufffd\001\002\000\004\055\ufffe\001\002\000\004\045\030" +
    "\001\002\000\004\007\031\001\002\000\004\047\032\001" +
    "\002\000\004\052\033\001\002\000\004\004\034\001\002" +
    "\000\004\047\035\001\002\000\004\074\036\001\002\000" +
    "\004\053\037\001\002\000\004\045\040\001\002\000\004" +
    "\010\041\001\002\000\004\047\042\001\002\000\004\052" +
    "\043\001\002\000\004\074\044\001\002\000\004\047\045" +
    "\001\002\000\004\074\046\001\002\000\004\053\047\001" +
    "\002\000\004\045\050\001\002\000\004\011\051\001\002" +
    "\000\004\047\052\001\002\000\004\071\053\001\002\000" +
    "\004\045\054\001\002\000\004\012\055\001\002\000\004" +
    "\047\056\001\002\000\004\074\057\001\002\000\004\045" +
    "\060\001\002\000\004\013\061\001\002\000\004\047\062" +
    "\001\002\000\004\074\063\001\002\000\016\037\075\041" +
    "\066\042\064\043\100\052\074\070\101\001\002\000\004" +
    "\050\u020f\001\002\000\020\037\ufff8\041\ufff8\042\ufff8\043" +
    "\ufff8\052\ufff8\053\ufff8\070\ufff8\001\002\000\004\050\u01f9" +
    "\001\002\000\020\037\ufff6\041\ufff6\042\ufff6\043\ufff6\052" +
    "\ufff6\053\ufff6\070\ufff6\001\002\000\020\037\ufff7\041\ufff7" +
    "\042\ufff7\043\ufff7\052\ufff7\053\ufff7\070\ufff7\001\002\000" +
    "\020\037\uffc8\041\uffc8\042\uffc8\043\uffc8\052\uffc8\053\uffc8" +
    "\070\uffc8\001\002\000\020\037\ufff9\041\ufff9\042\ufff9\043" +
    "\ufff9\052\ufff9\053\ufff9\070\ufff9\001\002\000\020\037\ufffc" +
    "\041\ufffc\042\ufffc\043\ufffc\052\ufffc\053\ufffc\070\ufffc\001" +
    "\002\000\004\014\175\001\002\000\004\050\163\001\002" +
    "\000\020\037\ufffa\041\ufffa\042\ufffa\043\ufffa\052\ufffa\053" +
    "\ufffa\070\ufffa\001\002\000\004\046\162\001\002\000\004" +
    "\052\132\001\002\000\014\044\105\056\107\062\110\066" +
    "\106\067\111\001\002\000\020\037\075\041\066\042\064" +
    "\043\100\052\074\053\103\070\101\001\002\000\004\002" +
    "\000\001\002\000\020\037\ufffb\041\ufffb\042\ufffb\043\ufffb" +
    "\052\ufffb\053\ufffb\070\ufffb\001\002\000\004\062\131\001" +
    "\002\000\006\062\130\066\127\001\002\000\004\062\126" +
    "\001\002\000\014\070\113\072\116\074\120\075\115\076" +
    "\117\001\002\000\006\062\122\067\123\001\002\000\014" +
    "\070\113\072\116\074\120\075\115\076\117\001\002\000" +
    "\004\046\uffc4\001\002\000\004\046\121\001\002\000\004" +
    "\046\uffc2\001\002\000\004\046\uffc3\001\002\000\004\046" +
    "\uffc1\001\002\000\004\046\uffc0\001\002\000\020\037\uffc7" +
    "\041\uffc7\042\uffc7\043\uffc7\052\uffc7\053\uffc7\070\uffc7\001" +
    "\002\000\014\070\uffbb\072\uffbb\074\uffbb\075\uffbb\076\uffbb" +
    "\001\002\000\006\046\uff98\051\uff98\001\002\000\004\046" +
    "\125\001\002\000\020\037\uffc5\041\uffc5\042\uffc5\043\uffc5" +
    "\052\uffc5\053\uffc5\070\uffc5\001\002\000\014\070\uffb9\072" +
    "\uffb9\074\uffb9\075\uffb9\076\uffb9\001\002\000\006\046\uff99" +
    "\051\uff99\001\002\000\014\070\uffbc\072\uffbc\074\uffbc\075" +
    "\uffbc\076\uffbc\001\002\000\014\070\uffba\072\uffba\074\uffba" +
    "\075\uffba\076\uffba\001\002\000\016\037\075\041\066\042" +
    "\064\043\100\052\074\070\101\001\002\000\020\037\075" +
    "\041\066\042\064\043\100\052\074\053\134\070\101\001" +
    "\002\000\004\042\135\001\002\000\004\050\136\001\002" +
    "\000\010\070\141\075\140\076\142\001\002\000\004\051" +
    "\uffa9\001\002\000\004\051\uffa3\001\002\000\016\057\152" +
    "\060\153\061\151\063\150\064\147\065\146\001\002\000" +
    "\004\051\uffa2\001\002\000\004\051\144\001\002\000\004" +
    "\046\145\001\002\000\020\037\uffac\041\uffac\042\uffac\043" +
    "\uffac\052\uffac\053\uffac\070\uffac\001\002\000\006\070\uff9f" +
    "\072\uff9f\001\002\000\006\070\uff9e\072\uff9e\001\002\000" +
    "\014\070\uffa1\072\uffa1\074\161\075\140\076\142\001\002" +
    "\000\012\070\uffa0\072\uffa0\075\140\076\142\001\002\000" +
    "\006\070\uff9d\072\uff9d\001\002\000\006\070\uff9c\072\uff9c" +
    "\001\002\000\006\070\155\072\156\001\002\000\004\051" +
    "\uffa8\001\002\000\004\051\uffa7\001\002\000\004\051\uffa5" +
    "\001\002\000\004\051\uffa6\001\002\000\004\051\uffa4\001" +
    "\002\000\020\037\uffc6\041\uffc6\042\uffc6\043\uffc6\052\uffc6" +
    "\053\uffc6\070\uffc6\001\002\000\010\070\141\075\140\076" +
    "\142\001\002\000\004\051\165\001\002\000\004\052\166" +
    "\001\002\000\016\037\075\041\066\042\064\043\100\052" +
    "\074\070\101\001\002\000\020\037\075\041\066\042\064" +
    "\043\100\052\074\053\170\070\101\001\002\000\022\037" +
    "\uffb0\040\171\041\uffb0\042\uffb0\043\uffb0\052\uffb0\053\uffb0" +
    "\070\uffb0\001\002\000\004\052\172\001\002\000\016\037" +
    "\075\041\066\042\064\043\100\052\074\070\101\001\002" +
    "\000\020\037\075\041\066\042\064\043\100\052\074\053" +
    "\174\070\101\001\002\000\020\037\uffaf\041\uffaf\042\uffaf" +
    "\043\uffaf\052\uffaf\053\uffaf\070\uffaf\001\002\000\004\047" +
    "\176\001\002\000\006\052\200\054\201\001\002\000\020" +
    "\037\ufff5\041\ufff5\042\ufff5\043\ufff5\052\ufff5\053\ufff5\070" +
    "\ufff5\001\002\000\004\016\u01de\001\002\000\004\052\202" +
    "\001\002\000\012\015\207\024\204\027\222\034\213\001" +
    "\002\000\020\037\ufff4\041\ufff4\042\ufff4\043\ufff4\052\ufff4" +
    "\053\ufff4\070\ufff4\001\002\000\004\047\u01a2\001\002\000" +
    "\020\037\ufff2\041\ufff2\042\ufff2\043\ufff2\052\ufff2\053\ufff2" +
    "\070\ufff2\001\002\000\020\037\uffee\041\uffee\042\uffee\043" +
    "\uffee\052\uffee\053\uffee\070\uffee\001\002\000\004\047\u0164" +
    "\001\002\000\020\037\uffd5\041\uffd5\042\uffd5\043\uffd5\052" +
    "\uffd5\053\uffd5\070\uffd5\001\002\000\020\037\uffdc\041\uffdc" +
    "\042\uffdc\043\uffdc\052\uffdc\053\uffdc\070\uffdc\001\002\000" +
    "\020\037\uffef\041\uffef\042\uffef\043\uffef\052\uffef\053\uffef" +
    "\070\uffef\001\002\000\004\047\u012c\001\002\000\020\037" +
    "\ufff1\041\ufff1\042\ufff1\043\ufff1\052\ufff1\053\ufff1\070\ufff1" +
    "\001\002\000\020\037\uffe5\041\uffe5\042\uffe5\043\uffe5\052" +
    "\uffe5\053\uffe5\070\uffe5\001\002\000\020\037\uffe4\041\uffe4" +
    "\042\uffe4\043\uffe4\052\uffe4\053\uffe4\070\uffe4\001\002\000" +
    "\020\037\ufff3\041\ufff3\042\ufff3\043\ufff3\052\ufff3\053\ufff3" +
    "\070\ufff3\001\002\000\020\037\uffdd\041\uffdd\042\uffdd\043" +
    "\uffdd\052\uffdd\053\uffdd\070\uffdd\001\002\000\020\037\uffd4" +
    "\041\uffd4\042\uffd4\043\uffd4\052\uffd4\053\uffd4\070\uffd4\001" +
    "\002\000\004\047\223\001\002\000\004\074\224\001\002" +
    "\000\004\045\225\001\002\000\004\030\226\001\002\000" +
    "\004\047\227\001\002\000\004\054\230\001\002\000\004" +
    "\052\231\001\002\000\004\024\232\001\002\000\004\047" +
    "\233\001\002\000\004\072\234\001\002\000\004\045\235" +
    "\001\002\000\004\025\236\001\002\000\004\047\237\001" +
    "\002\000\004\072\240\001\002\000\006\045\241\053\242" +
    "\001\002\000\004\034\332\001\002\000\006\045\243\055" +
    "\uffd9\001\002\000\004\052\320\001\002\000\004\055\245" +
    "\001\002\000\004\053\246\001\002\000\006\045\247\055" +
    "\uffd1\001\002\000\004\052\273\001\002\000\004\055\251" +
    "\001\002\000\004\045\252\001\002\000\004\020\253\001" +
    "\002\000\004\047\254\001\002\000\004\052\255\001\002" +
    "\000\004\004\256\001\002\000\004\047\257\001\002\000" +
    "\004\074\260\001\002\000\004\045\261\001\002\000\004" +
    "\021\262\001\002\000\004\047\263\001\002\000\004\074" +
    "\264\001\002\000\004\045\265\001\002\000\004\022\266" +
    "\001\002\000\004\047\267\001\002\000\004\074\270\001" +
    "\002\000\004\053\271\001\002\000\004\053\272\001\002" +
    "\000\020\037\uffd3\041\uffd3\042\uffd3\043\uffd3\052\uffd3\053" +
    "\uffd3\070\uffd3\001\002\000\004\027\274\001\002\000\004" +
    "\047\275\001\002\000\004\074\276\001\002\000\004\045" +
    "\277\001\002\000\004\030\300\001\002\000\004\047\301" +
    "\001\002\000\004\054\302\001\002\000\004\052\303\001" +
    "\002\000\004\024\304\001\002\000\004\047\305\001\002" +
    "\000\004\072\306\001\002\000\004\045\307\001\002\000" +
    "\004\025\310\001\002\000\004\047\311\001\002\000\004" +
    "\072\312\001\002\000\004\053\313\001\002\000\006\045" +
    "\243\055\uffd9\001\002\000\004\055\315\001\002\000\004" +
    "\053\316\001\002\000\006\045\247\055\uffd1\001\002\000" +
    "\004\055\uffd2\001\002\000\004\024\321\001\002\000\004" +
    "\047\322\001\002\000\004\072\323\001\002\000\004\045" +
    "\324\001\002\000\004\025\325\001\002\000\004\047\326" +
    "\001\002\000\004\072\327\001\002\000\004\053\330\001" +
    "\002\000\006\045\243\055\uffd9\001\002\000\004\055\uffda" +
    "\001\002\000\004\047\333\001\002\000\004\074\334\001" +
    "\002\000\004\053\335\001\002\000\006\045\336\055\uffce" +
    "\001\002\000\004\052\u011e\001\002\000\004\055\340\001" +
    "\002\000\004\045\341\001\002\000\004\017\342\001\002" +
    "\000\004\047\343\001\002\000\004\071\344\001\002\000" +
    "\004\045\345\001\002\000\004\031\346\001\002\000\004" +
    "\047\347\001\002\000\004\074\350\001\002\000\004\053" +
    "\351\001\002\000\004\045\353\001\002\000\004\055\u010c" +
    "\001\002\000\004\052\354\001\002\000\004\027\355\001" +
    "\002\000\004\047\356\001\002\000\004\074\357\001\002" +
    "\000\004\045\360\001\002\000\004\030\361\001\002\000" +
    "\004\047\362\001\002\000\004\054\363\001\002\000\004" +
    "\052\364\001\002\000\004\024\365\001\002\000\004\047" +
    "\366\001\002\000\004\072\367\001\002\000\004\045\370" +
    "\001\002\000\004\025\371\001\002\000\004\047\372\001" +
    "\002\000\004\072\373\001\002\000\004\045\374\001\002" +
    "\000\004\034\375\001\002\000\004\047\376\001\002\000" +
    "\004\074\377\001\002\000\004\053\u0100\001\002\000\006" +
    "\045\336\055\uffce\001\002\000\004\055\u0102\001\002\000" +
    "\004\045\u0103\001\002\000\004\017\u0104\001\002\000\004" +
    "\047\u0105\001\002\000\004\071\u0106\001\002\000\004\045" +
    "\u0107\001\002\000\004\031\u0108\001\002\000\004\047\u0109" +
    "\001\002\000\004\074\u010a\001\002\000\004\053\u010b\001" +
    "\002\000\004\055\uffcd\001\002\000\004\045\u010d\001\002" +
    "\000\004\020\u010e\001\002\000\004\047\u010f\001\002\000" +
    "\004\052\u0110\001\002\000\004\004\u0111\001\002\000\004" +
    "\047\u0112\001\002\000\004\074\u0113\001\002\000\004\045" +
    "\u0114\001\002\000\004\021\u0115\001\002\000\004\047\u0116" +
    "\001\002\000\004\074\u0117\001\002\000\004\045\u0118\001" +
    "\002\000\004\022\u0119\001\002\000\004\047\u011a\001\002" +
    "\000\004\074\u011b\001\002\000\004\053\u011c\001\002\000" +
    "\004\053\u011d\001\002\000\020\037\uffd0\041\uffd0\042\uffd0" +
    "\043\uffd0\052\uffd0\053\uffd0\070\uffd0\001\002\000\004\024" +
    "\u011f\001\002\000\004\047\u0120\001\002\000\004\072\u0121" +
    "\001\002\000\004\045\u0122\001\002\000\004\025\u0123\001" +
    "\002\000\004\047\u0124\001\002\000\004\072\u0125\001\002" +
    "\000\004\045\u0126\001\002\000\004\034\u0127\001\002\000" +
    "\004\047\u0128\001\002\000\004\074\u0129\001\002\000\004" +
    "\053\u012a\001\002\000\006\045\336\055\uffce\001\002\000" +
    "\004\055\uffcf\001\002\000\004\074\u012d\001\002\000\004" +
    "\045\u012e\001\002\000\004\016\u012f\001\002\000\004\047" +
    "\u0130\001\002\000\004\072\u0131\001\002\000\006\045\u0132" +
    "\053\u0133\001\002\000\004\017\u0142\001\002\000\006\045" +
    "\u0134\055\uffe1\001\002\000\004\052\u0138\001\002\000\004" +
    "\055\u0136\001\002\000\004\053\u0137\001\002\000\020\037" +
    "\uffe3\041\uffe3\042\uffe3\043\uffe3\052\uffe3\053\uffe3\070\uffe3" +
    "\001\002\000\004\034\u0139\001\002\000\004\047\u013a\001" +
    "\002\000\004\074\u013b\001\002\000\004\045\u013c\001\002" +
    "\000\004\016\u013d\001\002\000\004\047\u013e\001\002\000" +
    "\004\072\u013f\001\002\000\004\053\u0140\001\002\000\006" +
    "\045\u0134\055\uffe1\001\002\000\004\055\uffe2\001\002\000" +
    "\004\047\u0143\001\002\000\004\071\u0144\001\002\000\004" +
    "\053\u0145\001\002\000\006\045\u0146\055\uffde\001\002\000" +
    "\004\052\u0156\001\002\000\004\055\u0148\001\002\000\004" +
    "\045\u0149\001\002\000\004\020\u014a\001\002\000\004\047" +
    "\u014b\001\002\000\004\052\u014c\001\002\000\004\004\u014d" +
    "\001\002\000\004\047\u014e\001\002\000\004\074\u014f\001" +
    "\002\000\004\045\u0150\001\002\000\004\023\u0151\001\002" +
    "\000\004\047\u0152\001\002\000\004\074\u0153\001\002\000" +
    "\004\053\u0154\001\002\000\004\053\u0155\001\002\000\020" +
    "\037\uffe0\041\uffe0\042\uffe0\043\uffe0\052\uffe0\053\uffe0\070" +
    "\uffe0\001\002\000\004\034\u0157\001\002\000\004\047\u0158" +
    "\001\002\000\004\074\u0159\001\002\000\004\045\u015a\001" +
    "\002\000\004\016\u015b\001\002\000\004\047\u015c\001\002" +
    "\000\004\072\u015d\001\002\000\004\045\u015e\001\002\000" +
    "\004\017\u015f\001\002\000\004\047\u0160\001\002\000\004" +
    "\071\u0161\001\002\000\004\053\u0162\001\002\000\006\045" +
    "\u0146\055\uffde\001\002\000\004\055\uffdf\001\002\000\004" +
    "\074\u0165\001\002\000\004\045\u0166\001\002\000\004\016" +
    "\u0167\001\002\000\004\047\u0168\001\002\000\004\072\u0169" +
    "\001\002\000\006\045\u016a\053\u016b\001\002\000\004\017" +
    "\u017c\001\002\000\006\045\uffed\055\uffed\001\002\000\006" +
    "\045\u016d\055\uffe9\001\002\000\004\052\u0171\001\002\000" +
    "\004\055\u016f\001\002\000\004\053\u0170\001\002\000\020" +
    "\037\uffec\041\uffec\042\uffec\043\uffec\052\uffec\053\uffec\070" +
    "\uffec\001\002\000\004\015\u0172\001\002\000\004\047\u0173" +
    "\001\002\000\004\074\u0174\001\002\000\004\045\u0175\001" +
    "\002\000\004\016\u0176\001\002\000\004\047\u0177\001\002" +
    "\000\004\072\u0178\001\002\000\004\053\u0179\001\002\000" +
    "\006\045\uffeb\055\uffeb\001\002\000\006\045\u016d\055\uffe9" +
    "\001\002\000\004\055\uffea\001\002\000\004\047\u017d\001" +
    "\002\000\004\071\u017e\001\002\000\004\053\u017f\001\002" +
    "\000\006\045\u0181\055\uffe6\001\002\000\004\055\u0190\001" +
    "\002\000\004\052\u0182\001\002\000\004\015\u0183\001\002" +
    "\000\004\047\u0184\001\002\000\004\074\u0185\001\002\000" +
    "\004\045\u0186\001\002\000\004\016\u0187\001\002\000\004" +
    "\047\u0188\001\002\000\004\072\u0189\001\002\000\004\045" +
    "\u018a\001\002\000\004\017\u018b\001\002\000\004\047\u018c" +
    "\001\002\000\004\071\u018d\001\002\000\004\053\u018e\001" +
    "\002\000\006\045\u0181\055\uffe6\001\002\000\004\055\uffe7" +
    "\001\002\000\004\045\u0191\001\002\000\004\020\u0192\001" +
    "\002\000\004\047\u0193\001\002\000\004\052\u0194\001\002" +
    "\000\004\004\u0195\001\002\000\004\047\u0196\001\002\000" +
    "\004\074\u0197\001\002\000\004\045\u0198\001\002\000\004" +
    "\021\u0199\001\002\000\004\047\u019a\001\002\000\004\074" +
    "\u019b\001\002\000\004\045\u019c\001\002\000\004\022\u019d" +
    "\001\002\000\004\047\u019e\001\002\000\004\074\u019f\001" +
    "\002\000\004\053\u01a0\001\002\000\004\053\u01a1\001\002" +
    "\000\020\037\uffe8\041\uffe8\042\uffe8\043\uffe8\052\uffe8\053" +
    "\uffe8\070\uffe8\001\002\000\004\072\u01a3\001\002\000\004" +
    "\045\u01a4\001\002\000\004\025\u01a5\001\002\000\004\047" +
    "\u01a6\001\002\000\004\072\u01a7\001\002\000\006\045\u01a8" +
    "\053\u01a9\001\002\000\004\026\u01ad\001\002\000\006\045" +
    "\243\055\uffd9\001\002\000\004\055\u01ab\001\002\000\004" +
    "\053\u01ac\001\002\000\020\037\uffdb\041\uffdb\042\uffdb\043" +
    "\uffdb\052\uffdb\053\uffdb\070\uffdb\001\002\000\004\047\u01ae" +
    "\001\002\000\004\072\u01af\001\002\000\004\045\u01b0\001" +
    "\002\000\004\017\u01b1\001\002\000\004\047\u01b2\001\002" +
    "\000\004\071\u01b3\001\002\000\004\053\u01b4\001\002\000" +
    "\006\045\u01b5\055\uffd6\001\002\000\004\052\u01c9\001\002" +
    "\000\004\055\u01b7\001\002\000\004\045\u01b8\001\002\000" +
    "\004\020\u01b9\001\002\000\004\047\u01ba\001\002\000\004" +
    "\052\u01bb\001\002\000\004\004\u01bc\001\002\000\004\047" +
    "\u01bd\001\002\000\004\074\u01be\001\002\000\004\045\u01bf" +
    "\001\002\000\004\021\u01c0\001\002\000\004\047\u01c1\001" +
    "\002\000\004\074\u01c2\001\002\000\004\045\u01c3\001\002" +
    "\000\004\022\u01c4\001\002\000\004\047\u01c5\001\002\000" +
    "\004\074\u01c6\001\002\000\004\053\u01c7\001\002\000\004" +
    "\053\u01c8\001\002\000\020\037\uffd8\041\uffd8\042\uffd8\043" +
    "\uffd8\052\uffd8\053\uffd8\070\uffd8\001\002\000\004\024\u01ca" +
    "\001\002\000\004\047\u01cb\001\002\000\004\072\u01cc\001" +
    "\002\000\004\045\u01cd\001\002\000\004\025\u01ce\001\002" +
    "\000\004\047\u01cf\001\002\000\004\072\u01d0\001\002\000" +
    "\004\045\u01d1\001\002\000\004\026\u01d2\001\002\000\004" +
    "\047\u01d3\001\002\000\004\072\u01d4\001\002\000\004\045" +
    "\u01d5\001\002\000\004\017\u01d6\001\002\000\004\047\u01d7" +
    "\001\002\000\004\071\u01d8\001\002\000\004\053\u01d9\001" +
    "\002\000\006\045\u01b5\055\uffd6\001\002\000\004\055\uffd7" +
    "\001\002\000\020\037\uffcb\041\uffcb\042\uffcb\043\uffcb\052" +
    "\uffcb\053\uffcb\070\uffcb\001\002\000\020\037\ufff0\041\ufff0" +
    "\042\ufff0\043\ufff0\052\ufff0\053\ufff0\070\ufff0\001\002\000" +
    "\020\037\uffcc\041\uffcc\042\uffcc\043\uffcc\052\uffcc\053\uffcc" +
    "\070\uffcc\001\002\000\004\047\u01df\001\002\000\004\072" +
    "\u01e0\001\002\000\004\045\u01e1\001\002\000\004\034\u01e2" +
    "\001\002\000\004\047\u01e3\001\002\000\004\074\u01e4\001" +
    "\002\000\004\045\u01e5\001\002\000\004\005\u01e6\001\002" +
    "\000\004\047\u01e7\001\002\000\004\074\u01e8\001\002\000" +
    "\006\045\u01e9\053\u01ea\001\002\000\004\035\u01ec\001\002" +
    "\000\004\053\u01eb\001\002\000\020\037\uffca\041\uffca\042" +
    "\uffca\043\uffca\052\uffca\053\uffca\070\uffca\001\002\000\004" +
    "\047\u01ed\001\002\000\004\074\u01ee\001\002\000\004\045" +
    "\u01ef\001\002\000\004\017\u01f0\001\002\000\004\047\u01f1" +
    "\001\002\000\004\071\u01f2\001\002\000\004\045\u01f3\001" +
    "\002\000\004\036\u01f4\001\002\000\004\047\u01f5\001\002" +
    "\000\004\074\u01f6\001\002\000\004\053\u01f7\001\002\000" +
    "\004\053\u01f8\001\002\000\020\037\uffc9\041\uffc9\042\uffc9" +
    "\043\uffc9\052\uffc9\053\uffc9\070\uffc9\001\002\000\004\070" +
    "\u01fa\001\002\000\004\062\u01fb\001\002\000\004\072\u01fc" +
    "\001\002\000\004\046\u01fd\001\002\000\004\070\u01fe\001" +
    "\002\000\006\057\u0209\060\u020a\001\002\000\004\046\u0200" +
    "\001\002\000\004\070\u0201\001\002\000\006\066\u0207\067" +
    "\u0208\001\002\000\004\051\u0203\001\002\000\004\052\u0204" +
    "\001\002\000\016\037\075\041\066\042\064\043\100\052" +
    "\074\070\101\001\002\000\020\037\075\041\066\042\064" +
    "\043\100\052\074\053\u0206\070\101\001\002\000\020\037" +
    "\uffae\041\uffae\042\uffae\043\uffae\052\uffae\053\uffae\070\uffae" +
    "\001\002\000\004\066\127\001\002\000\004\067\123\001" +
    "\002\000\006\070\u020b\072\u020c\001\002\000\006\070\u020b" +
    "\072\u020c\001\002\000\004\046\uff9b\001\002\000\004\046" +
    "\uff9a\001\002\000\004\046\uffaa\001\002\000\004\046\uffab" +
    "\001\002\000\010\070\141\075\140\076\142\001\002\000" +
    "\004\051\u0211\001\002\000\004\052\u0212\001\002\000\016" +
    "\037\075\041\066\042\064\043\100\052\074\070\101\001" +
    "\002\000\020\037\075\041\066\042\064\043\100\052\074" +
    "\053\u0214\070\101\001\002\000\020\037\uffad\041\uffad\042" +
    "\uffad\043\uffad\052\uffad\053\uffad\070\uffad\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0213\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\020\001\001\000\002\001" +
    "\001\000\004\004\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\036\070\041\071" +
    "\045\066\050\076\051\064\052\067\065\075\066\101\067" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\063\111\001\001\000\022\036\070" +
    "\041\071\045\066\050\076\051\064\052\067\065\075\067" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\037" +
    "\123\001\001\000\002\001\001\000\004\037\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\036\070\041" +
    "\071\045\066\050\076\051\064\052\067\065\075\066\132" +
    "\067\072\001\001\000\022\036\070\041\071\045\066\050" +
    "\076\051\064\052\067\065\075\067\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\042\142\043\136\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\044\153" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\043\157\001\001\000\004\043\156\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\042\163" +
    "\043\136\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\036\070\041\071\045\066\050\076\051\064\052\067" +
    "\065\075\066\166\067\072\001\001\000\022\036\070\041" +
    "\071\045\066\050\076\051\064\052\067\065\075\067\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\036" +
    "\070\041\071\045\066\050\076\051\064\052\067\065\075" +
    "\066\172\067\072\001\001\000\022\036\070\041\071\045" +
    "\066\050\076\051\064\052\067\065\075\067\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\176\001" +
    "\001\000\002\001\001\000\010\033\u01dc\034\u01da\035\u01db" +
    "\001\001\000\002\001\001\000\032\006\202\007\211\011" +
    "\205\013\216\014\214\015\215\020\204\021\217\022\210" +
    "\025\207\026\220\031\213\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\243\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\247\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\313\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\316\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\330\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\336\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\351\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\u0100\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\u012a\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\u0134\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\u0140\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\u0146\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\u0162\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\070\u016b\001\001\000\004\010\u016d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\071\u0179\001" +
    "\001\000\004\010\u017a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\u017f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\u018e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\u01a9\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\u01b5\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\u01d9\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\046\u01fe\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\050\u0201\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\036" +
    "\070\041\071\045\066\050\076\051\064\052\067\065\075" +
    "\066\u0204\067\072\001\001\000\022\036\070\041\071\045" +
    "\066\050\076\051\064\052\067\065\075\067\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\047\u020d\001\001\000\004\047\u020c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\042\u020f\043\136\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\036\070\041\071\045\066\050" +
    "\076\051\064\052\067\065\075\066\u0212\067\072\001\001" +
    "\000\022\036\070\041\071\045\066\050\076\051\064\052" +
    "\067\065\075\067\103\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // Connect this parser to a scanner!
  public AnalizadorSintactico(analizadorLexico lex) {
	    super(lex);
	  }





String Errores;

public void syntax_error(Symbol cur_token) {
    StringBuilder error = new StringBuilder();
    error.append("ERROR SINTACTICO EN : ").append(symbl_name_from_id(cur_token.sym)).append("\n");
    error.append("Linea ").append(cur_token.left).append("\n");
    error.append("Columna ").append(cur_token.right).append("\n");
    if (cur_token.value != null) {
            error.append("Lexema: ").append(cur_token.value).append("\n");
        }



Errores=error.toString();
    System.out.println(error.toString());
}


private List<TablaSImbolos> tablaSimbolos= new ArrayList<>();
private List<DatosGraficaBarras> datosGraficaBarras = new ArrayList<>();




public List<TablaSImbolos> getTablaSimbolos(){
return tablaSimbolos;
}

private boolean existeVariable(String variable){
  for(TablaSImbolos tabla: tablaSimbolos){
    if(tabla.getIdentificaor().equals(variable)){
      return true;
    }
  }
  return false;
}











/*
public void unrecovered_syntax_error(Symbol cur_token) {
            System.out.println("Error irrecuperable sobrecargado");
        }*/


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action_part00000000(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= LLAVE_A TITLE DOS_PUNTOS CADENA COMA DESCRIPTION DOS_PUNTOS CADENA COMA KEYWORDS DOS_PUNTOS CORCHETE_A campos CORCHETE_C COMA HEADER DOS_PUNTOS LLAVE_A TITLE DOS_PUNTOS CADENA LLAVE_C COMA FOOTER DOS_PUNTOS LLAVE_A CADENA DOS_PUNTOS CADENA LLAVE_C COMA BACKGROUND_COLOR DOS_PUNTOS HEXADECIMAL COMA FONT_FAMILY DOS_PUNTOS CADENA COMA FONT_SIZE DOS_PUNTOS CADENA lista_instrucciones LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("Simon se analizó bien");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-43)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // campos ::= CADENA lista_campos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("campos",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_campos ::= COMA CADENA lista_campos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_campos",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lista_campos ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_campos",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_instrucciones ::= instruccion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_instrucciones ::= lista_instrucciones instruccion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= asignacion_operacion_id 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= condicion_if 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= bucle_while 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= bucle_do_while 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= bucle_for 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= LLAVE_A DATA DOS_PUNTOS grafica 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // grafica ::= CORCHETE_A LLAVE_A grafica_barras 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafica",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // grafica ::= CORCHETE_A LLAVE_A grafia_pastel 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafica",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // grafica ::= CORCHETE_A LLAVE_A grafica_puntos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafica",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // grafica ::= CORCHETE_A LLAVE_A grafica_lineas 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafica",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // grafica ::= LLAVE_A tarjeta_informacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafica",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // grafica_barras ::= grafica_barra_simple 
            {
              Object RESULT =null;
		 System.out.println("GRAFICA DE BARRAS SIMPLE"+ datosGraficaBarras); datosGraficaBarras.clear();   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafica_barras",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // grafica_barras ::= grafica_barras_extendida 
            {
              Object RESULT =null;
		System.out.println("GRAFICA DE BARRAS EXTENDIDA");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafica_barras",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$0 ::= 
            {
              Object RESULT =null;
		int catleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int catright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object cat = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
datosGraficaBarras.add(new DatosGraficaBarras(cat.toString(),  val.toString(), null )); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$0",54, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // grafica_barra_simple ::= CATEGORY DOS_PUNTOS CADENA COMA VALUE DOS_PUNTOS CONSTANTE LLAVE_C NT$0 mas_category_simple CORCHETE_C LLAVE_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int catleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).left;
		int catright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).right;
		Object cat = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafica_barra_simple",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$1 ::= 
            {
              Object RESULT =null;
		int catleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int catright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object cat = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
datosGraficaBarras.add(new DatosGraficaBarras(cat.toString(), val.toString(), null )); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$1",55, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // mas_category_simple ::= COMA LLAVE_A CATEGORY DOS_PUNTOS CADENA COMA VALUE DOS_PUNTOS CONSTANTE LLAVE_C NT$1 mas_category_simple 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int catleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int catright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Object cat = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mas_category_simple",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // mas_category_simple ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mas_category_simple",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // grafica_barras_extendida ::= CATEGORY DOS_PUNTOS CADENA COMA VALUE DOS_PUNTOS CONSTANTE COMA COLOR DOS_PUNTOS HEXADECIMAL LLAVE_C mas_category_extendida CORCHETE_C COMA CHART DOS_PUNTOS LLAVE_A TITLE DOS_PUNTOS CADENA COMA X_AXIS_LABEL DOS_PUNTOS CADENA COMA Y_AXIS_LABEL DOS_PUNTOS CADENA LLAVE_C LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafica_barras_extendida",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-30)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // mas_category_extendida ::= COMA LLAVE_A CATEGORY DOS_PUNTOS CADENA COMA VALUE DOS_PUNTOS CONSTANTE COMA COLOR DOS_PUNTOS HEXADECIMAL LLAVE_C mas_category_extendida 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mas_category_extendida",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-14)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // mas_category_extendida ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mas_category_extendida",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // grafia_pastel ::= grafica_pastel_simple 
            {
              Object RESULT =null;
		System.out.println("Grafica pastel simple");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafia_pastel",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // grafia_pastel ::= grafica_pastel_extendido 
            {
              Object RESULT =null;
		System.out.println("Grafica pastel extendida");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafia_pastel",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // grafica_pastel_simple ::= LABEL DOS_PUNTOS CADENA COMA VALUE DOS_PUNTOS CONSTANTE LLAVE_C mas_label CORCHETE_C LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafica_pastel_simple",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // mas_label ::= COMA LLAVE_A LABEL DOS_PUNTOS CADENA COMA VALUE DOS_PUNTOS CONSTANTE LLAVE_C mas_label 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mas_label",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // mas_label ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mas_label",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // grafica_pastel_extendido ::= LABEL DOS_PUNTOS CADENA COMA VALUE DOS_PUNTOS CONSTANTE COMA COLOR DOS_PUNTOS HEXADECIMAL LLAVE_C mas_label_extendido CORCHETE_C COMA CHART DOS_PUNTOS LLAVE_A TITLE DOS_PUNTOS CADENA COMA LEGEND_POSITION DOS_PUNTOS CADENA LLAVE_C LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafica_pastel_extendido",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-26)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // mas_label_extendido ::= COMA LLAVE_A LABEL DOS_PUNTOS CADENA COMA VALUE DOS_PUNTOS CONSTANTE COMA COLOR DOS_PUNTOS HEXADECIMAL LLAVE_C mas_label_extendido 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mas_label_extendido",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-14)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // mas_label_extendido ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mas_label_extendido",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // grafica_puntos ::= grafica_puntos_simple 
            {
              Object RESULT =null;
		System.out.println("Grafica de puntos"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafica_puntos",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // grafica_puntos ::= grafica_puntos_expandida 
            {
              Object RESULT =null;
		 System.out.println("GRAFICA DE PUNTOS EXPANDIDO");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafica_puntos",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // grafica_puntos_simple ::= X DOS_PUNTOS CONSTANTE COMA Y DOS_PUNTOS CONSTANTE LLAVE_C mas_coordenadas_simples CORCHETE_C LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafica_puntos_simple",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // mas_coordenadas_simples ::= COMA LLAVE_A X DOS_PUNTOS CONSTANTE COMA Y DOS_PUNTOS CONSTANTE LLAVE_C mas_coordenadas_simples 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mas_coordenadas_simples",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // mas_coordenadas_simples ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mas_coordenadas_simples",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // grafica_puntos_expandida ::= X DOS_PUNTOS CONSTANTE COMA Y DOS_PUNTOS CONSTANTE COMA SIZE DOS_PUNTOS CONSTANTE COMA COLOR DOS_PUNTOS HEXADECIMAL LLAVE_C mas_coordenadas_expandidas CORCHETE_C COMA CHART DOS_PUNTOS LLAVE_A TITLE DOS_PUNTOS CADENA COMA X_AXIS_LABEL DOS_PUNTOS CADENA COMA Y_AXIS_LABEL DOS_PUNTOS CADENA LLAVE_C LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafica_puntos_expandida",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-34)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // mas_coordenadas_expandidas ::= COMA LLAVE_A X DOS_PUNTOS CONSTANTE COMA Y DOS_PUNTOS CONSTANTE COMA SIZE DOS_PUNTOS CONSTANTE COMA COLOR DOS_PUNTOS HEXADECIMAL LLAVE_C mas_coordenadas_expandidas 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mas_coordenadas_expandidas",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-18)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // mas_coordenadas_expandidas ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mas_coordenadas_expandidas",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // grafica_lineas ::= grafica_lineas_simple 
            {
              Object RESULT =null;
		System.out.println("GRAFICA DE LINEAS SIMPLES");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafica_lineas",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // grafica_lineas ::= grafica_lineas_expandida 
            {
              Object RESULT =null;
		 System.out.println("GRAFICA DE LINEAS EXPANDIDA");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafica_lineas",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // grafica_lineas_simple ::= NAME DOS_PUNTOS CADENA COMA POINTS DOS_PUNTOS CORCHETE_A LLAVE_A X DOS_PUNTOS CONSTANTE COMA Y DOS_PUNTOS CONSTANTE LLAVE_C mas_coordenadas_simples CORCHETE_C LLAVE_C series_simples CORCHETE_C COMA CHART DOS_PUNTOS LLAVE_A TITLE DOS_PUNTOS CADENA COMA X_AXIS_LABEL DOS_PUNTOS CADENA COMA Y_AXIS_LABEL DOS_PUNTOS CADENA LLAVE_C LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafica_lineas_simple",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-37)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // series_simples ::= COMA LLAVE_A NAME DOS_PUNTOS CADENA COMA POINTS DOS_PUNTOS CORCHETE_A LLAVE_A X DOS_PUNTOS CONSTANTE COMA Y DOS_PUNTOS CONSTANTE LLAVE_C mas_coordenadas_simples CORCHETE_C LLAVE_C series_simples 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("series_simples",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-21)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // series_simples ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("series_simples",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // grafica_lineas_expandida ::= NAME DOS_PUNTOS CADENA COMA POINTS DOS_PUNTOS CORCHETE_A LLAVE_A X DOS_PUNTOS CONSTANTE COMA Y DOS_PUNTOS CONSTANTE COMA LABEL DOS_PUNTOS CADENA LLAVE_C mas_coordenadas_label CORCHETE_C COMA COLOR DOS_PUNTOS HEXADECIMAL COMA LINE_STYLE DOS_PUNTOS CADENA LLAVE_C series_expandidas CORCHETE_C COMA CHART DOS_PUNTOS LLAVE_A TITLE DOS_PUNTOS CADENA COMA X_AXIS_LABEL DOS_PUNTOS CADENA COMA Y_AXIS_LABEL DOS_PUNTOS CADENA LLAVE_C LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("grafica_lineas_expandida",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-49)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // mas_coordenadas_label ::= COMA LLAVE_A X DOS_PUNTOS CONSTANTE COMA Y DOS_PUNTOS CONSTANTE COMA LABEL DOS_PUNTOS CADENA LLAVE_C mas_coordenadas_label 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mas_coordenadas_label",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-14)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // mas_coordenadas_label ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mas_coordenadas_label",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // series_expandidas ::= COMA LLAVE_A NAME DOS_PUNTOS CADENA COMA POINTS DOS_PUNTOS CORCHETE_A LLAVE_A X DOS_PUNTOS CONSTANTE COMA Y DOS_PUNTOS CONSTANTE COMA LABEL DOS_PUNTOS CADENA LLAVE_C mas_coordenadas_label CORCHETE_C COMA COLOR DOS_PUNTOS HEXADECIMAL COMA LINE_STYLE DOS_PUNTOS CADENA LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("series_expandidas",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-32)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tarjeta_informacion ::= tarjeta_informacion_simple 
            {
              Object RESULT =null;
		 System.out.println("TARJETA INFORMACION SIMPLE"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tarjeta_informacion",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tarjeta_informacion ::= tarjeta_informacion_extendida 
            {
              Object RESULT =null;
		 System.out.println("TARJETA DE INFORMACION EXPANDIDA"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tarjeta_informacion",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // tarjeta_informacion_simple ::= VALUE DOS_PUNTOS CONSTANTE COMA LABEL DOS_PUNTOS CADENA COMA DESCRIPTION DOS_PUNTOS CADENA LLAVE_C LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tarjeta_informacion_simple",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-12)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // tarjeta_informacion_extendida ::= VALUE DOS_PUNTOS CONSTANTE COMA LABEL DOS_PUNTOS CADENA COMA DESCRIPTION DOS_PUNTOS CADENA COMA ICON DOS_PUNTOS CADENA COMA COLOR DOS_PUNTOS HEXADECIMAL COMA LINK DOS_PUNTOS CADENA LLAVE_C LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tarjeta_informacion_extendida",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-24)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // asignacion_operacion_id ::= asigancion 
            {
              Object RESULT =null;
		System.out.println("Asignacion");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asignacion_operacion_id",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // asignacion_operacion_id ::= IDENTIFICADOR asignacion_compuesta valor PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("Asignacion Compuesta");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asignacion_operacion_id",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // asignacion_operacion_id ::= incremento_decremento PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("incremente o decremento");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asignacion_operacion_id",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // asigancion ::= IDENTIFICADOR IGUAL valor PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                                                                if(!existeVariable(id.toString())){

                                                                Variable variable=(Variable) val; tablaSimbolos.add(new TablaSImbolos(variable.getTipoVariable(),id.toString(),(String) variable.getValor() ));
                                                                }else{
                                                                System.out.println("YA EXISTE LA VARIABLE");
                                                                }
                                                            
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asigancion",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // valor ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT= new Variable(TipoVariable.identificador,val.toString());  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // valor ::= CONSTANTE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT= new Variable(TipoVariable.constante,val.toString());  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // valor ::= TRUE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=new Variable(TipoVariable.booleano, val.toString());  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // valor ::= FALSE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=new Variable(TipoVariable.booleano,val.toString());  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // valor ::= CADENA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=new Variable(TipoVariable.cadena,val.toString());  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operacion ::= valor operador_artimetico valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operacion",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operacion ::= incremento_decremento valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operacion",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operacion ::= IDENTIFICADOR asignacion_compuesta valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operacion",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // asignacion_compuesta ::= MAS IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asignacion_compuesta",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // asignacion_compuesta ::= MENOS IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asignacion_compuesta",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // asignacion_compuesta ::= ASTERISCO IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asignacion_compuesta",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // asignacion_compuesta ::= BARRA IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asignacion_compuesta",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // operador_artimetico ::= ASTERISCO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_artimetico",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operador_artimetico ::= BARRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_artimetico",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // operador_artimetico ::= MENOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_artimetico",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // operador_artimetico ::= MAS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_artimetico",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // estructura_control ::= condicion_if 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("estructura_control",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // estructura_control ::= bucle_for 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("estructura_control",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // estructura_control ::= bucle_do_while 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("estructura_control",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // estructura_control ::= bucle_while 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("estructura_control",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // condicion_if ::= IF PARENTESIS_A condicion PARENTESIS_C LLAVE_A lista_instrucciones LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion_if",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // condicion_if ::= IF PARENTESIS_A condicion PARENTESIS_C LLAVE_A lista_instrucciones LLAVE_C ELSE LLAVE_A lista_instrucciones LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion_if",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // bucle_for ::= FOR PARENTESIS_A IDENTIFICADOR IGUAL CONSTANTE PUNTO_COMA condicional_for PUNTO_COMA incremento_decremento PARENTESIS_C LLAVE_A lista_instrucciones LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bucle_for",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-12)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // bucle_while ::= WHILE PARENTESIS_A condicion PARENTESIS_C LLAVE_A lista_instrucciones LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bucle_while",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // bucle_do_while ::= DO LLAVE_A lista_instrucciones LLAVE_C WHILE PARENTESIS_A condicion PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bucle_do_while",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // condicional_for ::= IDENTIFICADOR MENOR_IGUAL constate_identificador 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicional_for",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // condicional_for ::= IDENTIFICADOR MAYOR_IGUAL constate_identificador 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicional_for",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // condicion ::= booolean 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // condicion ::= IDENTIFICADOR comparador IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // condicion ::= IDENTIFICADOR comparador CONSTANTE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // condicion ::= IDENTIFICADOR IGUAL_IGUAL booolean 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // condicion ::= IDENTIFICADOR DIFERENTE booolean 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // condicion ::= IDENTIFICADOR IGUAL_IGUAL CADENA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // booolean ::= TRUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("booolean",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // booolean ::= FALSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("booolean",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // comparador ::= IGUAL_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("comparador",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // comparador ::= DIFERENTE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("comparador",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // comparador ::= MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("comparador",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // comparador ::= MENOR_QUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("comparador",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // comparador ::= MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("comparador",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // comparador ::= MAYOR_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("comparador",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // constate_identificador ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("constate_identificador",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // constate_identificador ::= CONSTANTE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("constate_identificador",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // incremento_decremento ::= IDENTIFICADOR MAS MAS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("incremento_decremento",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // incremento_decremento ::= IDENTIFICADOR MENOS MENOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("incremento_decremento",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico$do_action_part00000000(
                               CUP$AnalizadorSintactico$act_num,
                               CUP$AnalizadorSintactico$parser,
                               CUP$AnalizadorSintactico$stack,
                               CUP$AnalizadorSintactico$top);
    }
}

}
